import{_ as t,c as a,a as o,o as n}from"./app-y5f7CVCi.js";const s={};function i(r,e){return n(),a("div",null,e[0]||(e[0]=[o('<p>A few general concepts that are important to know.</p><h2 id="state-and-consensus" tabindex="-1"><a class="header-anchor" href="#state-and-consensus"><span>State and Consensus</span></a></h2><p>The state is the data that your &quot;system&quot; wants to track. In a cryptocurrency, it is most of the time the association between an <em>address</em> and a <em>value</em>, which represents the &quot;balance&quot; of an &quot;account&quot;.</p><ul><li>Account --&gt; Address</li><li>Balance --&gt; Value</li></ul><p>We say that the system reaches consensus when there is a undisputed and unambigious state that participants of system agree on.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>This is harder to achieve than it seems, especially in distributed systems.</p></div><h2 id="initial-state-and-blockchain" tabindex="-1"><a class="header-anchor" href="#initial-state-and-blockchain"><span>Initial State and Blockchain</span></a></h2><p>At the beginning, the system starts with a predetermined state. Usually, it is the state where every account has zero balance<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>.</p><p>Then as <em>transactions</em> are performed and recorded in the <em>Blockchain</em>, the state evolves.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>To maintain <em>consensus</em>, the <em>effects</em> and the <em>order</em> of the transactions must be <strong>deterministic</strong>.</p></div><h2 id="centralized-vs-decentralized" tabindex="-1"><a class="header-anchor" href="#centralized-vs-decentralized"><span>Centralized vs Decentralized</span></a></h2><p>A system is centralized when all the transactions must go through a single authority. Effectively, there is a <strong>boss</strong>. Everyone must report to them and nothing can change the State unless it has been checked and authorized by the boss.</p><p>The banking system follows the centralized model. Customers interact via Online Banking, Vendor Terminals, Retail Agents, etc. who will consult with the Bank Account Database before authorizing the operation<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup>.</p><p>The alternative is a <strong>decentralized</strong> system where no single authority is in charge of the system. Instead, consensus is reached when it can be established that &quot;enough&quot; participants agree and that the state is correct and unambiguous.</p><p>Correctness is the &quot;easier&quot; part. Unless there are bugs in the software, the state remains correct (by induction) if it started correct and <em>every transaction</em> is also correct.</p><p>But, there could be multiple correct states if the participants use different (valid) transactions.</p><p>We are not going to get into the details of how consensus is determined. It is <em>difficult</em> and <em>varies between types of Blockchains</em>.</p><h2 id="public-vs-private" tabindex="-1"><a class="header-anchor" href="#public-vs-private"><span>Public vs Private</span></a></h2><p>Most cryptocurrencies are anonymous but not private. Users do not register with a central authority in order to create an account (or an address) but it is possible, and fairly easy, to get the transaction history of any address. With a bit of effort, the transaction between addresses can be plotted and analyzed, giving valuable insights into someone&#39;s spending.</p><p>When external information is added, for example the KYC (Know Your Customer) data collected by the crypto exchanges, one can further identify the transaction details.</p><p>Private cryptocurrencies aim to eliminate (or at least reduce) the amount of identifiable information.</p><p>Ideally, a private system would be such that only the people involved in a transaction know that it took place. The recipients receive their funds but does not know where they came from.</p><p>In real life, a cash transaction achieves that<sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup>. But in the digital world, it is <strong>extremely difficult</strong>.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p><strong>No cryptocurrency is perfectly private</strong> unlike what they sometimes claim. It is always the responsibility of the user to know what information is made available to third parties. Also, users should be aware that there are <em>tradeoffs</em> between <strong>usability</strong> and <strong>privacy</strong>.</p></div><p>Unfortunately, many users overlook this aspect and demand that their private coin behaves as well as public coins. Progress can and will be made, but there are limitations that are very unlikely to disappear<sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup>.</p><p>The goal of this documentation is to give you the required insights into the ZK (Zero Knowledge) based privacy coins to make educated decisions.</p><h2 id="pools" tabindex="-1"><a class="header-anchor" href="#pools"><span>Pools</span></a></h2><p>Pools are groups of funds that share the same properties. Currencies are fungible, that means 1 unit of a currency has the same value whether it&#39;s the first one or any other created one. In other words, 1 dollar bill is always worth 1 dollar<sup class="footnote-ref"><a href="#footnote5">[5]</a><a class="footnote-anchor" id="footnote-ref5"></a></sup>.</p><p>It&#39;s the same thing for Cryptocurrencies.</p><p>However, it does not mean every ZEC or every USD has the same <em>physical</em> property. For example, 100 USD bill has the same value as 100 dollar coins or a cashier check of 100 USD but has different practical usability.</p><p>We say that coins form a <em>pool</em> of funds. Bank accounts form another pool. Funds can go from one pool to another with an exchange rate of 1 for 1 but it requires a transaction.</p><p>Most cryptocurrencies have a single type of funds, and therefore there is no concept of pool. But Zcash has three pools<sup class="footnote-ref"><a href="#footnote6">[6]</a><a class="footnote-anchor" id="footnote-ref6"></a></sup> now.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>Maybe one day Zcash will eliminate pools, but right now pools are a reality and users should know what they offer and how they differ.</p></div><h3 id="transparent-pool" tabindex="-1"><a class="header-anchor" href="#transparent-pool"><span>Transparent Pool</span></a></h3><p>The Transparent Pool contains funds that were sent to a transparent address. The addresses and amounts are in plain text and visible on the Blockchain. With the help of a block explorer, anyone can see where the funds came from with the same details as in Bitcoin. In other words, <strong>the transparent pool is fully public</strong>.</p><p>For example, by following this link: <a href="https://mainnet.zcashexplorer.app/address/t1PEp2GJLSdhDfCKqc2J211WKDUS1NfoQNy" target="_blank" rel="noopener noreferrer">t1PEp2GJLSdhDfCKqc2J211WKDUS1NfoQNy</a> you get its history of transactions.</p><p>Transparent addresses begin with <code>t</code>.</p><h3 id="shielded-pools" tabindex="-1"><a class="header-anchor" href="#shielded-pools"><span>Shielded Pools</span></a></h3><p>There are three shielded pools:</p><ul><li>Sprout,</li><li>Sapling,</li><li>Orchard.</li></ul><p>Sprout is deprecated. By now, it is only supported by <code>zcashd</code> and only for withdrawals. Sapling and Orchard are active.</p><p>Address beginning in <code>zs</code> are Sapling Shielded addresses. Orchard addresses begin with a <code>u</code>.</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Not all addresses that begin in <code>u</code> are Orchard! Instead they are Unified Addresses (UA) and may contain multiple addresses (called receivers in this context), <strong>including transparent</strong> ones.</p><p><strong>Do not assume that an address in <code>u</code> is only shielded.</strong></p></div><p>Transactions can involve funds from multiple pools.</p><h2 id="account-vs-outputs-model" tabindex="-1"><a class="header-anchor" href="#account-vs-outputs-model"><span>Account vs Outputs Model</span></a></h2><p>Transactions capture the exchange of funds in two possible ways:</p><ul><li>They can say: &quot;Transfer this amount from this address to that address&quot;, that&#39;s the <em>Account Model</em>,</li><li>or they can say: &quot;Here&#39;s some coins and bills&quot;, that&#39;s the <em>Output Model</em><sup class="footnote-ref"><a href="#footnote7">[7]</a><a class="footnote-anchor" id="footnote-ref7"></a></sup>.</li></ul><p>In real life, we use both models. When we use cash, ie physical money, we go with the Output Model. When we do an online transaction, we use the Account Model.</p><p>From the perspective of someone who wants to verify a transaction, the two models differ.</p><p>In any case, the verifier must check that the account has enough funds.</p><p>With the Account Model, the verifier keeps track of the balance of every account since any account can initiate a transaction. It does not have to keep the <em>history</em> of the account though. That&#39;s one value per account. It&#39;s small but it is <strong>global</strong> public data.</p><p>With the Output Model, the verifier must verify that the funds that are spent in the transaction were not previous spent. That&#39;s like tracking every bills and coins. It is more data but verification only requires <strong>local</strong> public data. The verifier does not need to know the balance of the account, just that the funds involved in the transaction are valid.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Private systems use the (unspent transaction) output model.</p></div><p>We don&#39;t have a technology that allows verification of global state privately. Essentially, we cannot verify that the account balance is greater than the value spent without revealing information about the account, the balance or the transaction amount.</p><h2 id="transactions" tabindex="-1"><a class="header-anchor" href="#transactions"><span>Transactions</span></a></h2><p>A transaction takes several<sup class="footnote-ref"><a href="#footnote8">[8]</a><a class="footnote-anchor" id="footnote-ref8"></a></sup> <em>Input</em> notes and creates <em>Output</em> notes.</p><p>A note represents an amount of currency at a given address. A note is associated with a single address but an address may be associated with multiple notes (or none).</p><p>There are Transparent notes, Sapling notes and Orchard notes. They use different cryptography, therefore they don&#39;t have the same address type. Their amount is interchangeable though.</p><ul><li>Inputs must refer to previous outputs. <ul><li>You cannot &quot;borrow&quot; money from a future transaction.</li><li>You cannot spend an output twice.</li></ul></li><li>Inputs come with a digital signature that authorizes their spending.</li><li>Outputs do not have signatures. As long as the address appears valid, it can be used. This means that the system does not verify that the recipient has the secret key.</li><li>The total amount of the inputs must exceed the total amounts of the outputs. The difference is the transaction fee that the miner can claim in the block reward<sup class="footnote-ref"><a href="#footnote9">[9]</a><a class="footnote-anchor" id="footnote-ref9"></a></sup>.</li><li>A transaction can involve notes from multiple pools.</li><li>Since amount are interchangeable, you can have for example, transparent input notes and shielded output notes as long as the transaction does not break any rules.</li><li>Shielded notes hide their amount and their address.</li></ul><div class="hint-container important"><p class="hint-container-title">Important</p><p>All these rules must be verifiable by a third-party not involved in the transaction. We&#39;ll come back to them when we revisit consensus in the following sections.</p></div><h2 id="blockchain" tabindex="-1"><a class="header-anchor" href="#blockchain"><span>Blockchain</span></a></h2><p>The blockchain is a series of blocks that are linked by a back reference <code>prev_hash</code>. Essentially every block is hashes by a cryptographic hash function which guarantees that its contents cannot be modified without resulting in a different hash value.</p><p>Every block contains the hash of its predecessor thus forming a &quot;chain&quot; where each block links to the previous block.</p><p>No one can modify a block without &quot;breaking&quot; the chain.</p><h2 id="blocks" tabindex="-1"><a class="header-anchor" href="#blocks"><span>Blocks</span></a></h2><p>Blocks contain a list of transactions. Their position in the list determines the order in which they should be applied<sup class="footnote-ref"><a href="#footnote10">[10]</a><a class="footnote-anchor" id="footnote-ref10"></a></sup> to the State.</p><p>They are produced by either <em>miners</em> or <em>validators</em> (depending on the type of blockchain). Regardless of the mechanism, the block production has several goals:</p><ul><li>ensure that blocks are produced correctly and at the desired interval</li><li>avoid or reduce the chances of having several blocks produced simultaneously, since it leads to an ambiguous state.</li></ul><h2 id="mempool" tabindex="-1"><a class="header-anchor" href="#mempool"><span>Mempool</span></a></h2><p>Before they get included in a block, transactions flow from node to node. The mempool stores the pending transactions, waiting for a block producer to include them. Until then, they can be evicted since a conflicting transaction may get chosen instead.</p><p>In a decentralized system, nodes have different transactions in their mempool. The block producers have their own mempool too. They will emit blocks based on the transactions they have.</p><h2 id="footnotes" tabindex="-1"><a class="header-anchor" href="#footnotes"><span>Footnotes</span></a></h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>Some cryptocurrencies start with funds in a set of predetermined addresses. This is called premining. <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li><li id="footnote2" class="footnote-item"><p>In practice, for performance reasons there are operations that do not require permission but the bank can revert them at a later time. <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li><li id="footnote3" class="footnote-item"><p>Assuming no other witnesses, unmarked bills, etc. <a href="#footnote-ref3" class="footnote-backref">↩︎</a></p></li><li id="footnote4" class="footnote-item"><p>Basically, it would take a miracle. <a href="#footnote-ref4" class="footnote-backref">↩︎</a></p></li><li id="footnote5" class="footnote-item"><p>Excluding collector&#39;s value <a href="#footnote-ref5" class="footnote-backref">↩︎</a></p></li><li id="footnote6" class="footnote-item"><p>Four if you count the first shielded pool Sprout which has fallen out of usage. <a href="#footnote-ref6" class="footnote-backref">↩︎</a></p></li><li id="footnote7" class="footnote-item"><p>Called UTXO model because Bitcoin came with this name first. <a href="#footnote-ref7" class="footnote-backref">↩︎</a></p></li><li id="footnote8" class="footnote-item"><p>Or none if it is the mining reward. <a href="#footnote-ref8" class="footnote-backref">↩︎</a></p></li><li id="footnote9" class="footnote-item"><p>Mining and fees are described later. They are not critical for understanding the protocol, but are important for the economics and security of the cryptocurrency. <a href="#footnote-ref9" class="footnote-backref">↩︎</a></p></li><li id="footnote10" class="footnote-item"><p>Changing the order can result in a different state since a transaction cannot use funds from later transactions. <a href="#footnote-ref10" class="footnote-backref">↩︎</a></p></li></ol></section>',74)]))}const h=t(s,[["render",i]]),l=JSON.parse('{"path":"/protocol/concepts.html","title":"Concepts","lang":"en-US","frontmatter":{"title":"Concepts"},"git":{"updatedTime":1760831004000,"contributors":[{"name":"Hanh","username":"Hanh","email":"hanh425@gmail.com","commits":1,"url":"https://github.com/Hanh"}],"changelog":[{"hash":"3232f0cbd01472f529ddb0de39714f6594baeb31","time":1760831004000,"email":"hanh425@gmail.com","author":"Hanh","message":"update readme"}]},"filePathRelative":"protocol/concepts.md"}');export{h as comp,l as data};
