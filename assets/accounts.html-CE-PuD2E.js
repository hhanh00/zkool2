import{_ as o,c as a,a as t,o as s}from"./app-D-X-frDV.js";const n={};function c(r,e){return s(),a("div",null,e[0]||(e[0]=[t('<h1 id="accounts" tabindex="-1"><a class="header-anchor" href="#accounts"><span>Accounts</span></a></h1><h2 id="keys" tabindex="-1"><a class="header-anchor" href="#keys"><span>Keys</span></a></h2><p>Accounts can be imported from various types of keys. The most common one being the seed phrase.</p><h3 id="seed-phrase" tabindex="-1"><a class="header-anchor" href="#seed-phrase"><span>Seed Phrase</span></a></h3><p>Zkool supports Seed phrases of 12, 15, 18, 21, and 24 words. New accounts have a 24 word seed phrase.</p><p>We recommend using 24 words if possible.</p><p>Optionally, the user can add a password or a passphrase to the seed phrase<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>.</p><p>Also the account can be derived at a given index in case the user wants to have more than one account with the same seed phrase.</p><h3 id="other-keys" tabindex="-1"><a class="header-anchor" href="#other-keys"><span>Other Keys</span></a></h3><p>Alternatively, accounts can be made using a unified viewing key (see next section), a legacy Sapling extended key<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup>, an extended transparent key<sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup> and finally a straight transparent private key<sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup></p><h2 id="view-only-accounts" tabindex="-1"><a class="header-anchor" href="#view-only-accounts"><span>View Only Accounts</span></a></h2><p>View Only Accounts are accounts that do not have secret keys but have the view keys. They can detect incoming and outgoing transactions and show the balance. But they absolutely cannot make new payments because they cannot sign.</p><p>View Only Accounts typically work in conjunction with a second device that has the secret keys in a secure location.</p><h2 id="multisig" tabindex="-1"><a class="header-anchor" href="#multisig"><span>MultiSig</span></a></h2><p>Zkool supports the creation of multisig accounts M/N using a Distributed Key Generation protocol (DKG).</p><p>Spending from a MultiSig account is possible using the FROST protocol.</p><p>The DKG and FROST protocols are implemented without the usage of a third party server.</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>Like in Trezor and Ledger <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li><li id="footnote2" class="footnote-item"><p>Sapling keys exported by zcashd <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li><li id="footnote3" class="footnote-item"><p>These are common in the Bitcoin world and corresponds to the BIP-32 derivation standard (<code>xprv</code> and <code>xpub</code> keys) <a href="#footnote-ref3" class="footnote-backref">↩︎</a></p></li><li id="footnote4" class="footnote-item"><p>It is the exported secret key. They begin with &#39;K&#39; or &#39;L&#39; <a href="#footnote-ref4" class="footnote-backref">↩︎</a></p></li></ol></section>',19)]))}const h=o(n,[["render",c]]),p=JSON.parse('{"path":"/src/manual/accounts.html","title":"Accounts","lang":"en-US","frontmatter":{},"git":{"updatedTime":1760450418000,"contributors":[{"name":"Hanh Huynh Huu","username":"","email":"hanh425@gmail.com","commits":1}],"changelog":[{"hash":"aac63ce366c824b0643349b3064793800960b5ac","time":1760450418000,"email":"hanh425@gmail.com","author":"Hanh Huynh Huu","message":"ledger"}]},"filePathRelative":"src/manual/accounts.md"}');export{h as comp,p as data};
