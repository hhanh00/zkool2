// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'account.dart';
import 'api/account.dart';
import 'api/db.dart';
import 'api/init.dart';
import 'api/key.dart';
import 'api/network.dart';
import 'api/pay.dart';
import 'api/sync.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'pay.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiInitInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => 19159366;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_zkool',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<PoolBalance> crateApiSyncBalance();

  Future<String> crateApiPayBroadcastTransaction(
      {required int height, required List<int> txBytes});

  Future<void> crateApiSyncCancelSync();

  Future<void> crateApiDbCreateDatabase(
      {required int coin, required String dbFilepath, String? password});

  Future<void> crateApiAccountDeleteAccount({required int account});

  Future<Uint8List> crateApiAccountExportAccount(
      {required int id, required String passphrase});

  Future<Uint8List> crateApiPayExtractTransaction(
      {required PcztPackage package});

  Future<String?> crateApiAccountGenerateNextChangeAddress();

  Future<int> crateApiAccountGenerateNextDindex();

  Future<String?> crateApiAccountGetAccountFingerprint({required int account});

  Future<Seed?> crateApiAccountGetAccountSeed({required int account});

  Future<String> crateApiAccountGetAccountUfvk(
      {required int account, required int pools});

  Future<Addresses> crateApiAccountGetAddresses();

  Future<double> crateApiNetworkGetCoingeckoPrice();

  Future<int> crateApiNetworkGetCurrentHeight();

  Future<int> crateApiSyncGetDbHeight();

  Future<String?> crateApiDbGetProp({required String key});

  Future<TxAccount> crateApiAccountGetTxDetails({required int idTx});

  Future<void> crateApiSyncGetTxDetails();

  Future<void> crateApiAccountImportAccount(
      {required String passphrase, required List<int> data});

  Future<void> crateApiInitInitApp();

  bool crateApiKeyIsValidAddress({required String address});

  bool crateApiKeyIsValidFvk({required String fvk});

  bool crateApiKeyIsValidKey({required String key});

  bool crateApiKeyIsValidPhrase({required String phrase});

  bool crateApiKeyIsValidTransparentAddress({required String address});

  Future<List<Account>> crateApiAccountListAccounts();

  Future<List<Memo>> crateApiAccountListMemos();

  Future<List<TxNote>> crateApiAccountListNotes();

  Future<List<Tx>> crateApiAccountListTxHistory();

  Future<void> crateApiAccountLockNote({required int id, required bool locked});

  Future<void> crateApiAccountMoveAccount(
      {required int oldPosition, required int newPosition});

  Future<String> crateApiAccountNewAccount({required NewAccount na});

  String crateApiAccountNewSeed({required String phrase});

  Future<void> crateApiDbOpenDatabase(
      {required String dbFilepath, String? password});

  Future<Uint8List> crateApiPayPackTransaction({required PcztPackage pczt});

  List<Recipient>? crateApiPayParsePaymentUri({required String uri});

  Future<PcztPackage> crateApiPayPrepare(
      {required int srcPools,
      required List<Recipient> recipients,
      required bool recipientPaysFee});

  Future<void> crateApiAccountPrintKeys({required int id});

  Future<void> crateApiDbPutProp({required String key, required String value});

  Future<Receivers> crateApiAccountReceiversDefault();

  Receivers crateApiAccountReceiversFromUa({required String ua});

  Future<void> crateApiAccountRemoveAccount({required int accountId});

  Future<void> crateApiAccountReorderAccount(
      {required int oldPosition, required int newPosition});

  Future<void> crateApiAccountResetSync({required int id});

  Future<void> crateApiSyncRewindSync({required int height});

  Future<String> crateApiPaySend(
      {required int height, required List<int> data});

  Future<void> crateApiAccountSetAccount({required int id});

  Stream<LogMessage> crateApiInitSetLogStream();

  void crateApiNetworkSetLwd({required String lwd});

  Future<PcztPackage> crateApiPaySignTransaction({required PcztPackage pczt});

  Stream<SyncProgress> crateApiSyncSynchronize(
      {required List<int> accounts,
      required int currentHeight,
      required int actionsPerSync,
      required int transparentLimit,
      required int checkpointAge});

  TxPlan crateApiPayToPlan({required PcztPackage package});

  Future<int> crateApiAccountTransparentSweep(
      {required int endHeight, required int gapLimit});

  String crateApiAccountUaFromUfvk({required String ufvk, int? di});

  Future<PcztPackage> crateApiPayUnpackTransaction({required List<int> bytes});

  Future<void> crateApiAccountUpdateAccount({required AccountUpdate update});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<PoolBalance> crateApiSyncBalance() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_pool_balance,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSyncBalanceConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSyncBalanceConstMeta => const TaskConstMeta(
        debugName: "balance",
        argNames: [],
      );

  @override
  Future<String> crateApiPayBroadcastTransaction(
      {required int height, required List<int> txBytes}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(height, serializer);
        sse_encode_list_prim_u_8_loose(txBytes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPayBroadcastTransactionConstMeta,
      argValues: [height, txBytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPayBroadcastTransactionConstMeta =>
      const TaskConstMeta(
        debugName: "broadcast_transaction",
        argNames: ["height", "txBytes"],
      );

  @override
  Future<void> crateApiSyncCancelSync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSyncCancelSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSyncCancelSyncConstMeta => const TaskConstMeta(
        debugName: "cancel_sync",
        argNames: [],
      );

  @override
  Future<void> crateApiDbCreateDatabase(
      {required int coin, required String dbFilepath, String? password}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(coin, serializer);
        sse_encode_String(dbFilepath, serializer);
        sse_encode_opt_String(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDbCreateDatabaseConstMeta,
      argValues: [coin, dbFilepath, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDbCreateDatabaseConstMeta => const TaskConstMeta(
        debugName: "create_database",
        argNames: ["coin", "dbFilepath", "password"],
      );

  @override
  Future<void> crateApiAccountDeleteAccount({required int account}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(account, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountDeleteAccountConstMeta,
      argValues: [account],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountDeleteAccountConstMeta =>
      const TaskConstMeta(
        debugName: "delete_account",
        argNames: ["account"],
      );

  @override
  Future<Uint8List> crateApiAccountExportAccount(
      {required int id, required String passphrase}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(id, serializer);
        sse_encode_String(passphrase, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountExportAccountConstMeta,
      argValues: [id, passphrase],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountExportAccountConstMeta =>
      const TaskConstMeta(
        debugName: "export_account",
        argNames: ["id", "passphrase"],
      );

  @override
  Future<Uint8List> crateApiPayExtractTransaction(
      {required PcztPackage package}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_pczt_package(package, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPayExtractTransactionConstMeta,
      argValues: [package],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPayExtractTransactionConstMeta =>
      const TaskConstMeta(
        debugName: "extract_transaction",
        argNames: ["package"],
      );

  @override
  Future<String?> crateApiAccountGenerateNextChangeAddress() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountGenerateNextChangeAddressConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountGenerateNextChangeAddressConstMeta =>
      const TaskConstMeta(
        debugName: "generate_next_change_address",
        argNames: [],
      );

  @override
  Future<int> crateApiAccountGenerateNextDindex() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountGenerateNextDindexConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountGenerateNextDindexConstMeta =>
      const TaskConstMeta(
        debugName: "generate_next_dindex",
        argNames: [],
      );

  @override
  Future<String?> crateApiAccountGetAccountFingerprint({required int account}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(account, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountGetAccountFingerprintConstMeta,
      argValues: [account],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountGetAccountFingerprintConstMeta =>
      const TaskConstMeta(
        debugName: "get_account_fingerprint",
        argNames: ["account"],
      );

  @override
  Future<Seed?> crateApiAccountGetAccountSeed({required int account}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(account, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_seed,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountGetAccountSeedConstMeta,
      argValues: [account],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountGetAccountSeedConstMeta =>
      const TaskConstMeta(
        debugName: "get_account_seed",
        argNames: ["account"],
      );

  @override
  Future<String> crateApiAccountGetAccountUfvk(
      {required int account, required int pools}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(account, serializer);
        sse_encode_u_8(pools, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountGetAccountUfvkConstMeta,
      argValues: [account, pools],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountGetAccountUfvkConstMeta =>
      const TaskConstMeta(
        debugName: "get_account_ufvk",
        argNames: ["account", "pools"],
      );

  @override
  Future<Addresses> crateApiAccountGetAddresses() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_addresses,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountGetAddressesConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountGetAddressesConstMeta =>
      const TaskConstMeta(
        debugName: "get_addresses",
        argNames: [],
      );

  @override
  Future<double> crateApiNetworkGetCoingeckoPrice() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiNetworkGetCoingeckoPriceConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNetworkGetCoingeckoPriceConstMeta =>
      const TaskConstMeta(
        debugName: "get_coingecko_price",
        argNames: [],
      );

  @override
  Future<int> crateApiNetworkGetCurrentHeight() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiNetworkGetCurrentHeightConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNetworkGetCurrentHeightConstMeta =>
      const TaskConstMeta(
        debugName: "get_current_height",
        argNames: [],
      );

  @override
  Future<int> crateApiSyncGetDbHeight() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSyncGetDbHeightConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSyncGetDbHeightConstMeta => const TaskConstMeta(
        debugName: "get_db_height",
        argNames: [],
      );

  @override
  Future<String?> crateApiDbGetProp({required String key}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(key, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDbGetPropConstMeta,
      argValues: [key],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDbGetPropConstMeta => const TaskConstMeta(
        debugName: "get_prop",
        argNames: ["key"],
      );

  @override
  Future<TxAccount> crateApiAccountGetTxDetails({required int idTx}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(idTx, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_tx_account,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountGetTxDetailsConstMeta,
      argValues: [idTx],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountGetTxDetailsConstMeta =>
      const TaskConstMeta(
        debugName: "get_tx_details",
        argNames: ["idTx"],
      );

  @override
  Future<void> crateApiSyncGetTxDetails() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSyncGetTxDetailsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSyncGetTxDetailsConstMeta => const TaskConstMeta(
        debugName: "get_tx_details",
        argNames: [],
      );

  @override
  Future<void> crateApiAccountImportAccount(
      {required String passphrase, required List<int> data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(passphrase, serializer);
        sse_encode_list_prim_u_8_loose(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountImportAccountConstMeta,
      argValues: [passphrase, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountImportAccountConstMeta =>
      const TaskConstMeta(
        debugName: "import_account",
        argNames: ["passphrase", "data"],
      );

  @override
  Future<void> crateApiInitInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInitInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInitInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  bool crateApiKeyIsValidAddress({required String address}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(address, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiKeyIsValidAddressConstMeta,
      argValues: [address],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiKeyIsValidAddressConstMeta => const TaskConstMeta(
        debugName: "is_valid_address",
        argNames: ["address"],
      );

  @override
  bool crateApiKeyIsValidFvk({required String fvk}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(fvk, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiKeyIsValidFvkConstMeta,
      argValues: [fvk],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiKeyIsValidFvkConstMeta => const TaskConstMeta(
        debugName: "is_valid_fvk",
        argNames: ["fvk"],
      );

  @override
  bool crateApiKeyIsValidKey({required String key}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(key, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiKeyIsValidKeyConstMeta,
      argValues: [key],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiKeyIsValidKeyConstMeta => const TaskConstMeta(
        debugName: "is_valid_key",
        argNames: ["key"],
      );

  @override
  bool crateApiKeyIsValidPhrase({required String phrase}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(phrase, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiKeyIsValidPhraseConstMeta,
      argValues: [phrase],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiKeyIsValidPhraseConstMeta => const TaskConstMeta(
        debugName: "is_valid_phrase",
        argNames: ["phrase"],
      );

  @override
  bool crateApiKeyIsValidTransparentAddress({required String address}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(address, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiKeyIsValidTransparentAddressConstMeta,
      argValues: [address],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiKeyIsValidTransparentAddressConstMeta =>
      const TaskConstMeta(
        debugName: "is_valid_transparent_address",
        argNames: ["address"],
      );

  @override
  Future<List<Account>> crateApiAccountListAccounts() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_account,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountListAccountsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountListAccountsConstMeta =>
      const TaskConstMeta(
        debugName: "list_accounts",
        argNames: [],
      );

  @override
  Future<List<Memo>> crateApiAccountListMemos() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_memo,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountListMemosConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountListMemosConstMeta => const TaskConstMeta(
        debugName: "list_memos",
        argNames: [],
      );

  @override
  Future<List<TxNote>> crateApiAccountListNotes() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_tx_note,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountListNotesConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountListNotesConstMeta => const TaskConstMeta(
        debugName: "list_notes",
        argNames: [],
      );

  @override
  Future<List<Tx>> crateApiAccountListTxHistory() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_tx,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountListTxHistoryConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountListTxHistoryConstMeta =>
      const TaskConstMeta(
        debugName: "list_tx_history",
        argNames: [],
      );

  @override
  Future<void> crateApiAccountLockNote(
      {required int id, required bool locked}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(id, serializer);
        sse_encode_bool(locked, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountLockNoteConstMeta,
      argValues: [id, locked],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountLockNoteConstMeta => const TaskConstMeta(
        debugName: "lock_note",
        argNames: ["id", "locked"],
      );

  @override
  Future<void> crateApiAccountMoveAccount(
      {required int oldPosition, required int newPosition}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(oldPosition, serializer);
        sse_encode_u_32(newPosition, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountMoveAccountConstMeta,
      argValues: [oldPosition, newPosition],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountMoveAccountConstMeta => const TaskConstMeta(
        debugName: "move_account",
        argNames: ["oldPosition", "newPosition"],
      );

  @override
  Future<String> crateApiAccountNewAccount({required NewAccount na}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_new_account(na, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 33, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountNewAccountConstMeta,
      argValues: [na],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountNewAccountConstMeta => const TaskConstMeta(
        debugName: "new_account",
        argNames: ["na"],
      );

  @override
  String crateApiAccountNewSeed({required String phrase}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(phrase, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountNewSeedConstMeta,
      argValues: [phrase],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountNewSeedConstMeta => const TaskConstMeta(
        debugName: "new_seed",
        argNames: ["phrase"],
      );

  @override
  Future<void> crateApiDbOpenDatabase(
      {required String dbFilepath, String? password}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dbFilepath, serializer);
        sse_encode_opt_String(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 35, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDbOpenDatabaseConstMeta,
      argValues: [dbFilepath, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDbOpenDatabaseConstMeta => const TaskConstMeta(
        debugName: "open_database",
        argNames: ["dbFilepath", "password"],
      );

  @override
  Future<Uint8List> crateApiPayPackTransaction({required PcztPackage pczt}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_pczt_package(pczt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 36, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPayPackTransactionConstMeta,
      argValues: [pczt],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPayPackTransactionConstMeta => const TaskConstMeta(
        debugName: "pack_transaction",
        argNames: ["pczt"],
      );

  @override
  List<Recipient>? crateApiPayParsePaymentUri({required String uri}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(uri, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 37)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_list_recipient,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPayParsePaymentUriConstMeta,
      argValues: [uri],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPayParsePaymentUriConstMeta => const TaskConstMeta(
        debugName: "parse_payment_uri",
        argNames: ["uri"],
      );

  @override
  Future<PcztPackage> crateApiPayPrepare(
      {required int srcPools,
      required List<Recipient> recipients,
      required bool recipientPaysFee}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(srcPools, serializer);
        sse_encode_list_recipient(recipients, serializer);
        sse_encode_bool(recipientPaysFee, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 38, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_pczt_package,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPayPrepareConstMeta,
      argValues: [srcPools, recipients, recipientPaysFee],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPayPrepareConstMeta => const TaskConstMeta(
        debugName: "prepare",
        argNames: ["srcPools", "recipients", "recipientPaysFee"],
      );

  @override
  Future<void> crateApiAccountPrintKeys({required int id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 39, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountPrintKeysConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountPrintKeysConstMeta => const TaskConstMeta(
        debugName: "print_keys",
        argNames: ["id"],
      );

  @override
  Future<void> crateApiDbPutProp({required String key, required String value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(key, serializer);
        sse_encode_String(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 40, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDbPutPropConstMeta,
      argValues: [key, value],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDbPutPropConstMeta => const TaskConstMeta(
        debugName: "put_prop",
        argNames: ["key", "value"],
      );

  @override
  Future<Receivers> crateApiAccountReceiversDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 41, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_receivers,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAccountReceiversDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountReceiversDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "receivers_default",
        argNames: [],
      );

  @override
  Receivers crateApiAccountReceiversFromUa({required String ua}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(ua, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_receivers,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountReceiversFromUaConstMeta,
      argValues: [ua],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountReceiversFromUaConstMeta =>
      const TaskConstMeta(
        debugName: "receivers_from_ua",
        argNames: ["ua"],
      );

  @override
  Future<void> crateApiAccountRemoveAccount({required int accountId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(accountId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 43, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountRemoveAccountConstMeta,
      argValues: [accountId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountRemoveAccountConstMeta =>
      const TaskConstMeta(
        debugName: "remove_account",
        argNames: ["accountId"],
      );

  @override
  Future<void> crateApiAccountReorderAccount(
      {required int oldPosition, required int newPosition}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(oldPosition, serializer);
        sse_encode_u_32(newPosition, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 44, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountReorderAccountConstMeta,
      argValues: [oldPosition, newPosition],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountReorderAccountConstMeta =>
      const TaskConstMeta(
        debugName: "reorder_account",
        argNames: ["oldPosition", "newPosition"],
      );

  @override
  Future<void> crateApiAccountResetSync({required int id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 45, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountResetSyncConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountResetSyncConstMeta => const TaskConstMeta(
        debugName: "reset_sync",
        argNames: ["id"],
      );

  @override
  Future<void> crateApiSyncRewindSync({required int height}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(height, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 46, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSyncRewindSyncConstMeta,
      argValues: [height],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSyncRewindSyncConstMeta => const TaskConstMeta(
        debugName: "rewind_sync",
        argNames: ["height"],
      );

  @override
  Future<String> crateApiPaySend(
      {required int height, required List<int> data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(height, serializer);
        sse_encode_list_prim_u_8_loose(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 47, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPaySendConstMeta,
      argValues: [height, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPaySendConstMeta => const TaskConstMeta(
        debugName: "send",
        argNames: ["height", "data"],
      );

  @override
  Future<void> crateApiAccountSetAccount({required int id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 48, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountSetAccountConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountSetAccountConstMeta => const TaskConstMeta(
        debugName: "set_account",
        argNames: ["id"],
      );

  @override
  Stream<LogMessage> crateApiInitSetLogStream() {
    final s = RustStreamSink<LogMessage>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_log_message_Sse(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 49)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInitSetLogStreamConstMeta,
      argValues: [s],
      apiImpl: this,
    ));
    return s.stream;
  }

  TaskConstMeta get kCrateApiInitSetLogStreamConstMeta => const TaskConstMeta(
        debugName: "set_log_stream",
        argNames: ["s"],
      );

  @override
  void crateApiNetworkSetLwd({required String lwd}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(lwd, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 50)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiNetworkSetLwdConstMeta,
      argValues: [lwd],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNetworkSetLwdConstMeta => const TaskConstMeta(
        debugName: "set_lwd",
        argNames: ["lwd"],
      );

  @override
  Future<PcztPackage> crateApiPaySignTransaction({required PcztPackage pczt}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_pczt_package(pczt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 51, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_pczt_package,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPaySignTransactionConstMeta,
      argValues: [pczt],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPaySignTransactionConstMeta => const TaskConstMeta(
        debugName: "sign_transaction",
        argNames: ["pczt"],
      );

  @override
  Stream<SyncProgress> crateApiSyncSynchronize(
      {required List<int> accounts,
      required int currentHeight,
      required int actionsPerSync,
      required int transparentLimit,
      required int checkpointAge}) {
    final progress = RustStreamSink<SyncProgress>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_sync_progress_Sse(progress, serializer);
        sse_encode_list_prim_u_32_loose(accounts, serializer);
        sse_encode_u_32(currentHeight, serializer);
        sse_encode_u_32(actionsPerSync, serializer);
        sse_encode_u_32(transparentLimit, serializer);
        sse_encode_u_32(checkpointAge, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 52, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSyncSynchronizeConstMeta,
      argValues: [
        progress,
        accounts,
        currentHeight,
        actionsPerSync,
        transparentLimit,
        checkpointAge
      ],
      apiImpl: this,
    )));
    return progress.stream;
  }

  TaskConstMeta get kCrateApiSyncSynchronizeConstMeta => const TaskConstMeta(
        debugName: "synchronize",
        argNames: [
          "progress",
          "accounts",
          "currentHeight",
          "actionsPerSync",
          "transparentLimit",
          "checkpointAge"
        ],
      );

  @override
  TxPlan crateApiPayToPlan({required PcztPackage package}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_pczt_package(package, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 53)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_tx_plan,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPayToPlanConstMeta,
      argValues: [package],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPayToPlanConstMeta => const TaskConstMeta(
        debugName: "to_plan",
        argNames: ["package"],
      );

  @override
  Future<int> crateApiAccountTransparentSweep(
      {required int endHeight, required int gapLimit}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(endHeight, serializer);
        sse_encode_u_32(gapLimit, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 54, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountTransparentSweepConstMeta,
      argValues: [endHeight, gapLimit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountTransparentSweepConstMeta =>
      const TaskConstMeta(
        debugName: "transparent_sweep",
        argNames: ["endHeight", "gapLimit"],
      );

  @override
  String crateApiAccountUaFromUfvk({required String ufvk, int? di}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(ufvk, serializer);
        sse_encode_opt_box_autoadd_u_32(di, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 55)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountUaFromUfvkConstMeta,
      argValues: [ufvk, di],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountUaFromUfvkConstMeta => const TaskConstMeta(
        debugName: "ua_from_ufvk",
        argNames: ["ufvk", "di"],
      );

  @override
  Future<PcztPackage> crateApiPayUnpackTransaction({required List<int> bytes}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 56, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_pczt_package,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPayUnpackTransactionConstMeta,
      argValues: [bytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPayUnpackTransactionConstMeta =>
      const TaskConstMeta(
        debugName: "unpack_transaction",
        argNames: ["bytes"],
      );

  @override
  Future<void> crateApiAccountUpdateAccount({required AccountUpdate update}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_account_update(update, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 57, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountUpdateAccountConstMeta,
      argValues: [update],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountUpdateAccountConstMeta =>
      const TaskConstMeta(
        debugName: "update_account",
        argNames: ["update"],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  RustStreamSink<LogMessage> dco_decode_StreamSink_log_message_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<SyncProgress> dco_decode_StreamSink_sync_progress_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Account dco_decode_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 13)
      throw Exception('unexpected arr length: expect 13 but see ${arr.length}');
    return Account(
      coin: dco_decode_u_8(arr[0]),
      id: dco_decode_u_32(arr[1]),
      name: dco_decode_String(arr[2]),
      seed: dco_decode_opt_String(arr[3]),
      aindex: dco_decode_u_32(arr[4]),
      icon: dco_decode_opt_list_prim_u_8_strict(arr[5]),
      birth: dco_decode_u_32(arr[6]),
      position: dco_decode_u_8(arr[7]),
      hidden: dco_decode_bool(arr[8]),
      saved: dco_decode_bool(arr[9]),
      enabled: dco_decode_bool(arr[10]),
      height: dco_decode_u_32(arr[11]),
      balance: dco_decode_u_64(arr[12]),
    );
  }

  @protected
  AccountUpdate dco_decode_account_update(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return AccountUpdate(
      coin: dco_decode_u_8(arr[0]),
      id: dco_decode_u_32(arr[1]),
      name: dco_decode_opt_String(arr[2]),
      icon: dco_decode_opt_list_prim_u_8_strict(arr[3]),
      birth: dco_decode_opt_box_autoadd_u_32(arr[4]),
      hidden: dco_decode_opt_box_autoadd_bool(arr[5]),
      enabled: dco_decode_opt_box_autoadd_bool(arr[6]),
    );
  }

  @protected
  Addresses dco_decode_addresses(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Addresses(
      taddr: dco_decode_opt_String(arr[0]),
      saddr: dco_decode_opt_String(arr[1]),
      oaddr: dco_decode_opt_String(arr[2]),
      ua: dco_decode_opt_String(arr[3]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  AccountUpdate dco_decode_box_autoadd_account_update(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_account_update(raw);
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  NewAccount dco_decode_box_autoadd_new_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_new_account(raw);
  }

  @protected
  PcztPackage dco_decode_box_autoadd_pczt_package(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_pczt_package(raw);
  }

  @protected
  Seed dco_decode_box_autoadd_seed(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_seed(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<Account> dco_decode_list_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_account).toList();
  }

  @protected
  List<Memo> dco_decode_list_memo(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_memo).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_32_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint32List dco_decode_list_prim_u_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint32List;
  }

  @protected
  Uint64List dco_decode_list_prim_u_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeUint64List(raw);
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  Uint64List dco_decode_list_prim_usize_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint64List;
  }

  @protected
  List<Recipient> dco_decode_list_recipient(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_recipient).toList();
  }

  @protected
  List<Tx> dco_decode_list_tx(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tx).toList();
  }

  @protected
  List<TxMemo> dco_decode_list_tx_memo(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tx_memo).toList();
  }

  @protected
  List<TxNote> dco_decode_list_tx_note(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tx_note).toList();
  }

  @protected
  List<TxPlanIn> dco_decode_list_tx_plan_in(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tx_plan_in).toList();
  }

  @protected
  List<TxPlanOut> dco_decode_list_tx_plan_out(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tx_plan_out).toList();
  }

  @protected
  List<TxSpend> dco_decode_list_tx_spend(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tx_spend).toList();
  }

  @protected
  LogMessage dco_decode_log_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return LogMessage(
      level: dco_decode_u_8(arr[0]),
      message: dco_decode_String(arr[1]),
      span: dco_decode_opt_String(arr[2]),
    );
  }

  @protected
  Memo dco_decode_memo(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return Memo(
      id: dco_decode_u_32(arr[0]),
      idTx: dco_decode_u_32(arr[1]),
      idNote: dco_decode_opt_box_autoadd_u_32(arr[2]),
      pool: dco_decode_u_8(arr[3]),
      height: dco_decode_u_32(arr[4]),
      vout: dco_decode_u_32(arr[5]),
      time: dco_decode_u_32(arr[6]),
      memoBytes: dco_decode_list_prim_u_8_strict(arr[7]),
      memo: dco_decode_opt_String(arr[8]),
    );
  }

  @protected
  NewAccount dco_decode_new_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return NewAccount(
      icon: dco_decode_opt_list_prim_u_8_strict(arr[0]),
      name: dco_decode_String(arr[1]),
      restore: dco_decode_bool(arr[2]),
      key: dco_decode_String(arr[3]),
      passphrase: dco_decode_opt_String(arr[4]),
      fingerprint: dco_decode_opt_list_prim_u_8_strict(arr[5]),
      aindex: dco_decode_u_32(arr[6]),
      birth: dco_decode_opt_box_autoadd_u_32(arr[7]),
      useInternal: dco_decode_bool(arr[8]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  Seed? dco_decode_opt_box_autoadd_seed(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_seed(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_8(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  List<Recipient>? dco_decode_opt_list_recipient(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_recipient(raw);
  }

  @protected
  PcztPackage dco_decode_pczt_package(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return PcztPackage(
      pczt: dco_decode_list_prim_u_8_strict(arr[0]),
      nSpends: dco_decode_usize_array_3(arr[1]),
      saplingIndices: dco_decode_list_prim_usize_strict(arr[2]),
      orchardIndices: dco_decode_list_prim_usize_strict(arr[3]),
      canSign: dco_decode_bool(arr[4]),
      canBroadcast: dco_decode_bool(arr[5]),
      puri: dco_decode_String(arr[6]),
    );
  }

  @protected
  PoolBalance dco_decode_pool_balance(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PoolBalance(
      field0: dco_decode_list_prim_u_64_strict(arr[0]),
    );
  }

  @protected
  Receivers dco_decode_receivers(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Receivers(
      taddr: dco_decode_opt_String(arr[0]),
      saddr: dco_decode_opt_String(arr[1]),
      oaddr: dco_decode_opt_String(arr[2]),
    );
  }

  @protected
  Recipient dco_decode_recipient(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return Recipient(
      address: dco_decode_String(arr[0]),
      amount: dco_decode_u_64(arr[1]),
      pools: dco_decode_opt_box_autoadd_u_8(arr[2]),
      userMemo: dco_decode_opt_String(arr[3]),
      memoBytes: dco_decode_opt_list_prim_u_8_strict(arr[4]),
    );
  }

  @protected
  Seed dco_decode_seed(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Seed(
      mnemonic: dco_decode_String(arr[0]),
      phrase: dco_decode_String(arr[1]),
      aindex: dco_decode_u_32(arr[2]),
    );
  }

  @protected
  SyncProgress dco_decode_sync_progress(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SyncProgress(
      height: dco_decode_u_32(arr[0]),
      time: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  Tx dco_decode_tx(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return Tx(
      id: dco_decode_u_32(arr[0]),
      txid: dco_decode_list_prim_u_8_strict(arr[1]),
      height: dco_decode_u_32(arr[2]),
      time: dco_decode_u_32(arr[3]),
      value: dco_decode_i_64(arr[4]),
    );
  }

  @protected
  TxAccount dco_decode_tx_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return TxAccount(
      id: dco_decode_u_32(arr[0]),
      account: dco_decode_u_32(arr[1]),
      txid: dco_decode_list_prim_u_8_strict(arr[2]),
      height: dco_decode_u_32(arr[3]),
      time: dco_decode_u_32(arr[4]),
      notes: dco_decode_list_tx_note(arr[5]),
      spends: dco_decode_list_tx_spend(arr[6]),
      memos: dco_decode_list_tx_memo(arr[7]),
    );
  }

  @protected
  TxMemo dco_decode_tx_memo(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TxMemo(
      id: dco_decode_u_32(arr[0]),
      pool: dco_decode_u_8(arr[1]),
      memo: dco_decode_opt_String(arr[2]),
    );
  }

  @protected
  TxNote dco_decode_tx_note(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return TxNote(
      id: dco_decode_u_32(arr[0]),
      pool: dco_decode_u_8(arr[1]),
      height: dco_decode_u_32(arr[2]),
      value: dco_decode_u_64(arr[3]),
      locked: dco_decode_bool(arr[4]),
    );
  }

  @protected
  TxPlan dco_decode_tx_plan(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return TxPlan(
      height: dco_decode_u_32(arr[0]),
      inputs: dco_decode_list_tx_plan_in(arr[1]),
      outputs: dco_decode_list_tx_plan_out(arr[2]),
      fee: dco_decode_u_64(arr[3]),
      canSign: dco_decode_bool(arr[4]),
      canBroadcast: dco_decode_bool(arr[5]),
    );
  }

  @protected
  TxPlanIn dco_decode_tx_plan_in(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TxPlanIn(
      pool: dco_decode_u_8(arr[0]),
      amount: dco_decode_opt_box_autoadd_u_64(arr[1]),
    );
  }

  @protected
  TxPlanOut dco_decode_tx_plan_out(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TxPlanOut(
      pool: dco_decode_u_8(arr[0]),
      amount: dco_decode_u_64(arr[1]),
      address: dco_decode_String(arr[2]),
    );
  }

  @protected
  TxSpend dco_decode_tx_spend(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TxSpend(
      id: dco_decode_u_32(arr[0]),
      pool: dco_decode_u_8(arr[1]),
      height: dco_decode_u_32(arr[2]),
      value: dco_decode_u_64(arr[3]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  UsizeArray3 dco_decode_usize_array_3(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UsizeArray3(dco_decode_list_prim_usize_strict(raw));
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  RustStreamSink<LogMessage> sse_decode_StreamSink_log_message_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<SyncProgress> sse_decode_StreamSink_sync_progress_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Account sse_decode_account(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_coin = sse_decode_u_8(deserializer);
    var var_id = sse_decode_u_32(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_seed = sse_decode_opt_String(deserializer);
    var var_aindex = sse_decode_u_32(deserializer);
    var var_icon = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_birth = sse_decode_u_32(deserializer);
    var var_position = sse_decode_u_8(deserializer);
    var var_hidden = sse_decode_bool(deserializer);
    var var_saved = sse_decode_bool(deserializer);
    var var_enabled = sse_decode_bool(deserializer);
    var var_height = sse_decode_u_32(deserializer);
    var var_balance = sse_decode_u_64(deserializer);
    return Account(
        coin: var_coin,
        id: var_id,
        name: var_name,
        seed: var_seed,
        aindex: var_aindex,
        icon: var_icon,
        birth: var_birth,
        position: var_position,
        hidden: var_hidden,
        saved: var_saved,
        enabled: var_enabled,
        height: var_height,
        balance: var_balance);
  }

  @protected
  AccountUpdate sse_decode_account_update(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_coin = sse_decode_u_8(deserializer);
    var var_id = sse_decode_u_32(deserializer);
    var var_name = sse_decode_opt_String(deserializer);
    var var_icon = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_birth = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_hidden = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_enabled = sse_decode_opt_box_autoadd_bool(deserializer);
    return AccountUpdate(
        coin: var_coin,
        id: var_id,
        name: var_name,
        icon: var_icon,
        birth: var_birth,
        hidden: var_hidden,
        enabled: var_enabled);
  }

  @protected
  Addresses sse_decode_addresses(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_taddr = sse_decode_opt_String(deserializer);
    var var_saddr = sse_decode_opt_String(deserializer);
    var var_oaddr = sse_decode_opt_String(deserializer);
    var var_ua = sse_decode_opt_String(deserializer);
    return Addresses(
        taddr: var_taddr, saddr: var_saddr, oaddr: var_oaddr, ua: var_ua);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  AccountUpdate sse_decode_box_autoadd_account_update(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_account_update(deserializer));
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  NewAccount sse_decode_box_autoadd_new_account(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_new_account(deserializer));
  }

  @protected
  PcztPackage sse_decode_box_autoadd_pczt_package(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_pczt_package(deserializer));
  }

  @protected
  Seed sse_decode_box_autoadd_seed(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_seed(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8(deserializer));
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<Account> sse_decode_list_account(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Account>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_account(deserializer));
    }
    return ans_;
  }

  @protected
  List<Memo> sse_decode_list_memo(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Memo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_memo(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_32_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  @protected
  Uint32List sse_decode_list_prim_u_32_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  @protected
  Uint64List sse_decode_list_prim_u_64_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint64List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint64List sse_decode_list_prim_usize_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint64List(len_);
  }

  @protected
  List<Recipient> sse_decode_list_recipient(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Recipient>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_recipient(deserializer));
    }
    return ans_;
  }

  @protected
  List<Tx> sse_decode_list_tx(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Tx>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tx(deserializer));
    }
    return ans_;
  }

  @protected
  List<TxMemo> sse_decode_list_tx_memo(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TxMemo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tx_memo(deserializer));
    }
    return ans_;
  }

  @protected
  List<TxNote> sse_decode_list_tx_note(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TxNote>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tx_note(deserializer));
    }
    return ans_;
  }

  @protected
  List<TxPlanIn> sse_decode_list_tx_plan_in(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TxPlanIn>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tx_plan_in(deserializer));
    }
    return ans_;
  }

  @protected
  List<TxPlanOut> sse_decode_list_tx_plan_out(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TxPlanOut>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tx_plan_out(deserializer));
    }
    return ans_;
  }

  @protected
  List<TxSpend> sse_decode_list_tx_spend(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TxSpend>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tx_spend(deserializer));
    }
    return ans_;
  }

  @protected
  LogMessage sse_decode_log_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_level = sse_decode_u_8(deserializer);
    var var_message = sse_decode_String(deserializer);
    var var_span = sse_decode_opt_String(deserializer);
    return LogMessage(level: var_level, message: var_message, span: var_span);
  }

  @protected
  Memo sse_decode_memo(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_idTx = sse_decode_u_32(deserializer);
    var var_idNote = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_pool = sse_decode_u_8(deserializer);
    var var_height = sse_decode_u_32(deserializer);
    var var_vout = sse_decode_u_32(deserializer);
    var var_time = sse_decode_u_32(deserializer);
    var var_memoBytes = sse_decode_list_prim_u_8_strict(deserializer);
    var var_memo = sse_decode_opt_String(deserializer);
    return Memo(
        id: var_id,
        idTx: var_idTx,
        idNote: var_idNote,
        pool: var_pool,
        height: var_height,
        vout: var_vout,
        time: var_time,
        memoBytes: var_memoBytes,
        memo: var_memo);
  }

  @protected
  NewAccount sse_decode_new_account(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_icon = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_restore = sse_decode_bool(deserializer);
    var var_key = sse_decode_String(deserializer);
    var var_passphrase = sse_decode_opt_String(deserializer);
    var var_fingerprint = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_aindex = sse_decode_u_32(deserializer);
    var var_birth = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_useInternal = sse_decode_bool(deserializer);
    return NewAccount(
        icon: var_icon,
        name: var_name,
        restore: var_restore,
        key: var_key,
        passphrase: var_passphrase,
        fingerprint: var_fingerprint,
        aindex: var_aindex,
        birth: var_birth,
        useInternal: var_useInternal);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Seed? sse_decode_opt_box_autoadd_seed(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_seed(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<Recipient>? sse_decode_opt_list_recipient(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_recipient(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PcztPackage sse_decode_pczt_package(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_pczt = sse_decode_list_prim_u_8_strict(deserializer);
    var var_nSpends = sse_decode_usize_array_3(deserializer);
    var var_saplingIndices = sse_decode_list_prim_usize_strict(deserializer);
    var var_orchardIndices = sse_decode_list_prim_usize_strict(deserializer);
    var var_canSign = sse_decode_bool(deserializer);
    var var_canBroadcast = sse_decode_bool(deserializer);
    var var_puri = sse_decode_String(deserializer);
    return PcztPackage(
        pczt: var_pczt,
        nSpends: var_nSpends,
        saplingIndices: var_saplingIndices,
        orchardIndices: var_orchardIndices,
        canSign: var_canSign,
        canBroadcast: var_canBroadcast,
        puri: var_puri);
  }

  @protected
  PoolBalance sse_decode_pool_balance(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_list_prim_u_64_strict(deserializer);
    return PoolBalance(field0: var_field0);
  }

  @protected
  Receivers sse_decode_receivers(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_taddr = sse_decode_opt_String(deserializer);
    var var_saddr = sse_decode_opt_String(deserializer);
    var var_oaddr = sse_decode_opt_String(deserializer);
    return Receivers(taddr: var_taddr, saddr: var_saddr, oaddr: var_oaddr);
  }

  @protected
  Recipient sse_decode_recipient(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_address = sse_decode_String(deserializer);
    var var_amount = sse_decode_u_64(deserializer);
    var var_pools = sse_decode_opt_box_autoadd_u_8(deserializer);
    var var_userMemo = sse_decode_opt_String(deserializer);
    var var_memoBytes = sse_decode_opt_list_prim_u_8_strict(deserializer);
    return Recipient(
        address: var_address,
        amount: var_amount,
        pools: var_pools,
        userMemo: var_userMemo,
        memoBytes: var_memoBytes);
  }

  @protected
  Seed sse_decode_seed(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_mnemonic = sse_decode_String(deserializer);
    var var_phrase = sse_decode_String(deserializer);
    var var_aindex = sse_decode_u_32(deserializer);
    return Seed(mnemonic: var_mnemonic, phrase: var_phrase, aindex: var_aindex);
  }

  @protected
  SyncProgress sse_decode_sync_progress(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_height = sse_decode_u_32(deserializer);
    var var_time = sse_decode_u_32(deserializer);
    return SyncProgress(height: var_height, time: var_time);
  }

  @protected
  Tx sse_decode_tx(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_txid = sse_decode_list_prim_u_8_strict(deserializer);
    var var_height = sse_decode_u_32(deserializer);
    var var_time = sse_decode_u_32(deserializer);
    var var_value = sse_decode_i_64(deserializer);
    return Tx(
        id: var_id,
        txid: var_txid,
        height: var_height,
        time: var_time,
        value: var_value);
  }

  @protected
  TxAccount sse_decode_tx_account(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_account = sse_decode_u_32(deserializer);
    var var_txid = sse_decode_list_prim_u_8_strict(deserializer);
    var var_height = sse_decode_u_32(deserializer);
    var var_time = sse_decode_u_32(deserializer);
    var var_notes = sse_decode_list_tx_note(deserializer);
    var var_spends = sse_decode_list_tx_spend(deserializer);
    var var_memos = sse_decode_list_tx_memo(deserializer);
    return TxAccount(
        id: var_id,
        account: var_account,
        txid: var_txid,
        height: var_height,
        time: var_time,
        notes: var_notes,
        spends: var_spends,
        memos: var_memos);
  }

  @protected
  TxMemo sse_decode_tx_memo(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_pool = sse_decode_u_8(deserializer);
    var var_memo = sse_decode_opt_String(deserializer);
    return TxMemo(id: var_id, pool: var_pool, memo: var_memo);
  }

  @protected
  TxNote sse_decode_tx_note(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_pool = sse_decode_u_8(deserializer);
    var var_height = sse_decode_u_32(deserializer);
    var var_value = sse_decode_u_64(deserializer);
    var var_locked = sse_decode_bool(deserializer);
    return TxNote(
        id: var_id,
        pool: var_pool,
        height: var_height,
        value: var_value,
        locked: var_locked);
  }

  @protected
  TxPlan sse_decode_tx_plan(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_height = sse_decode_u_32(deserializer);
    var var_inputs = sse_decode_list_tx_plan_in(deserializer);
    var var_outputs = sse_decode_list_tx_plan_out(deserializer);
    var var_fee = sse_decode_u_64(deserializer);
    var var_canSign = sse_decode_bool(deserializer);
    var var_canBroadcast = sse_decode_bool(deserializer);
    return TxPlan(
        height: var_height,
        inputs: var_inputs,
        outputs: var_outputs,
        fee: var_fee,
        canSign: var_canSign,
        canBroadcast: var_canBroadcast);
  }

  @protected
  TxPlanIn sse_decode_tx_plan_in(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_pool = sse_decode_u_8(deserializer);
    var var_amount = sse_decode_opt_box_autoadd_u_64(deserializer);
    return TxPlanIn(pool: var_pool, amount: var_amount);
  }

  @protected
  TxPlanOut sse_decode_tx_plan_out(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_pool = sse_decode_u_8(deserializer);
    var var_amount = sse_decode_u_64(deserializer);
    var var_address = sse_decode_String(deserializer);
    return TxPlanOut(pool: var_pool, amount: var_amount, address: var_address);
  }

  @protected
  TxSpend sse_decode_tx_spend(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_pool = sse_decode_u_8(deserializer);
    var var_height = sse_decode_u_32(deserializer);
    var var_value = sse_decode_u_64(deserializer);
    return TxSpend(
        id: var_id, pool: var_pool, height: var_height, value: var_value);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  UsizeArray3 sse_decode_usize_array_3(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_usize_strict(deserializer);
    return UsizeArray3(inner);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_StreamSink_log_message_Sse(
      RustStreamSink<LogMessage> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_log_message,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_sync_progress_Sse(
      RustStreamSink<SyncProgress> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_sync_progress,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_account(Account self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.coin, serializer);
    sse_encode_u_32(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.seed, serializer);
    sse_encode_u_32(self.aindex, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.icon, serializer);
    sse_encode_u_32(self.birth, serializer);
    sse_encode_u_8(self.position, serializer);
    sse_encode_bool(self.hidden, serializer);
    sse_encode_bool(self.saved, serializer);
    sse_encode_bool(self.enabled, serializer);
    sse_encode_u_32(self.height, serializer);
    sse_encode_u_64(self.balance, serializer);
  }

  @protected
  void sse_encode_account_update(AccountUpdate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.coin, serializer);
    sse_encode_u_32(self.id, serializer);
    sse_encode_opt_String(self.name, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.icon, serializer);
    sse_encode_opt_box_autoadd_u_32(self.birth, serializer);
    sse_encode_opt_box_autoadd_bool(self.hidden, serializer);
    sse_encode_opt_box_autoadd_bool(self.enabled, serializer);
  }

  @protected
  void sse_encode_addresses(Addresses self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.taddr, serializer);
    sse_encode_opt_String(self.saddr, serializer);
    sse_encode_opt_String(self.oaddr, serializer);
    sse_encode_opt_String(self.ua, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_account_update(
      AccountUpdate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_account_update(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_new_account(
      NewAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_new_account(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_pczt_package(
      PcztPackage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_pczt_package(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_seed(Seed self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_seed(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_account(List<Account> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_account(item, serializer);
    }
  }

  @protected
  void sse_encode_list_memo(List<Memo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_memo(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_32_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint32List(self is Uint32List ? self : Uint32List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_32_strict(
      Uint32List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint32List(self);
  }

  @protected
  void sse_encode_list_prim_u_64_strict(
      Uint64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint64List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_prim_usize_strict(
      Uint64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint64List(self);
  }

  @protected
  void sse_encode_list_recipient(
      List<Recipient> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_recipient(item, serializer);
    }
  }

  @protected
  void sse_encode_list_tx(List<Tx> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tx(item, serializer);
    }
  }

  @protected
  void sse_encode_list_tx_memo(List<TxMemo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tx_memo(item, serializer);
    }
  }

  @protected
  void sse_encode_list_tx_note(List<TxNote> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tx_note(item, serializer);
    }
  }

  @protected
  void sse_encode_list_tx_plan_in(
      List<TxPlanIn> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tx_plan_in(item, serializer);
    }
  }

  @protected
  void sse_encode_list_tx_plan_out(
      List<TxPlanOut> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tx_plan_out(item, serializer);
    }
  }

  @protected
  void sse_encode_list_tx_spend(List<TxSpend> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tx_spend(item, serializer);
    }
  }

  @protected
  void sse_encode_log_message(LogMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.level, serializer);
    sse_encode_String(self.message, serializer);
    sse_encode_opt_String(self.span, serializer);
  }

  @protected
  void sse_encode_memo(Memo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_u_32(self.idTx, serializer);
    sse_encode_opt_box_autoadd_u_32(self.idNote, serializer);
    sse_encode_u_8(self.pool, serializer);
    sse_encode_u_32(self.height, serializer);
    sse_encode_u_32(self.vout, serializer);
    sse_encode_u_32(self.time, serializer);
    sse_encode_list_prim_u_8_strict(self.memoBytes, serializer);
    sse_encode_opt_String(self.memo, serializer);
  }

  @protected
  void sse_encode_new_account(NewAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_list_prim_u_8_strict(self.icon, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_bool(self.restore, serializer);
    sse_encode_String(self.key, serializer);
    sse_encode_opt_String(self.passphrase, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.fingerprint, serializer);
    sse_encode_u_32(self.aindex, serializer);
    sse_encode_opt_box_autoadd_u_32(self.birth, serializer);
    sse_encode_bool(self.useInternal, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_seed(Seed? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_seed(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_recipient(
      List<Recipient>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_recipient(self, serializer);
    }
  }

  @protected
  void sse_encode_pczt_package(PcztPackage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.pczt, serializer);
    sse_encode_usize_array_3(self.nSpends, serializer);
    sse_encode_list_prim_usize_strict(self.saplingIndices, serializer);
    sse_encode_list_prim_usize_strict(self.orchardIndices, serializer);
    sse_encode_bool(self.canSign, serializer);
    sse_encode_bool(self.canBroadcast, serializer);
    sse_encode_String(self.puri, serializer);
  }

  @protected
  void sse_encode_pool_balance(PoolBalance self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_64_strict(self.field0, serializer);
  }

  @protected
  void sse_encode_receivers(Receivers self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.taddr, serializer);
    sse_encode_opt_String(self.saddr, serializer);
    sse_encode_opt_String(self.oaddr, serializer);
  }

  @protected
  void sse_encode_recipient(Recipient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.address, serializer);
    sse_encode_u_64(self.amount, serializer);
    sse_encode_opt_box_autoadd_u_8(self.pools, serializer);
    sse_encode_opt_String(self.userMemo, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.memoBytes, serializer);
  }

  @protected
  void sse_encode_seed(Seed self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.mnemonic, serializer);
    sse_encode_String(self.phrase, serializer);
    sse_encode_u_32(self.aindex, serializer);
  }

  @protected
  void sse_encode_sync_progress(SyncProgress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.height, serializer);
    sse_encode_u_32(self.time, serializer);
  }

  @protected
  void sse_encode_tx(Tx self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_list_prim_u_8_strict(self.txid, serializer);
    sse_encode_u_32(self.height, serializer);
    sse_encode_u_32(self.time, serializer);
    sse_encode_i_64(self.value, serializer);
  }

  @protected
  void sse_encode_tx_account(TxAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_u_32(self.account, serializer);
    sse_encode_list_prim_u_8_strict(self.txid, serializer);
    sse_encode_u_32(self.height, serializer);
    sse_encode_u_32(self.time, serializer);
    sse_encode_list_tx_note(self.notes, serializer);
    sse_encode_list_tx_spend(self.spends, serializer);
    sse_encode_list_tx_memo(self.memos, serializer);
  }

  @protected
  void sse_encode_tx_memo(TxMemo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_u_8(self.pool, serializer);
    sse_encode_opt_String(self.memo, serializer);
  }

  @protected
  void sse_encode_tx_note(TxNote self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_u_8(self.pool, serializer);
    sse_encode_u_32(self.height, serializer);
    sse_encode_u_64(self.value, serializer);
    sse_encode_bool(self.locked, serializer);
  }

  @protected
  void sse_encode_tx_plan(TxPlan self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.height, serializer);
    sse_encode_list_tx_plan_in(self.inputs, serializer);
    sse_encode_list_tx_plan_out(self.outputs, serializer);
    sse_encode_u_64(self.fee, serializer);
    sse_encode_bool(self.canSign, serializer);
    sse_encode_bool(self.canBroadcast, serializer);
  }

  @protected
  void sse_encode_tx_plan_in(TxPlanIn self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.pool, serializer);
    sse_encode_opt_box_autoadd_u_64(self.amount, serializer);
  }

  @protected
  void sse_encode_tx_plan_out(TxPlanOut self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.pool, serializer);
    sse_encode_u_64(self.amount, serializer);
    sse_encode_String(self.address, serializer);
  }

  @protected
  void sse_encode_tx_spend(TxSpend self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_u_8(self.pool, serializer);
    sse_encode_u_32(self.height, serializer);
    sse_encode_u_64(self.value, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_usize_array_3(UsizeArray3 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_usize_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
