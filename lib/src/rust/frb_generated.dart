// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'account.dart';
import 'api/account.dart';
import 'api/db.dart';
import 'api/frost.dart';
import 'api/init.dart';
import 'api/key.dart';
import 'api/mempool.dart';
import 'api/network.dart';
import 'api/pay.dart';
import 'api/sync.dart';
import 'coin.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'pay.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiInitInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => 1738813392;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rlz',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiMempoolMempoolCancel({required Mempool that});

  Mempool crateApiMempoolMempoolNew();

  Stream<MempoolMsg> crateApiMempoolMempoolRun(
      {required Mempool that, required int height});

  Future<PoolBalance> crateApiSyncBalance();

  Future<String> crateApiPayBroadcastTransaction(
      {required int height, required List<int> txBytes});

  Future<String> crateApiPayBuildPuri({required List<Recipient> recipients});

  Future<void> crateApiFrostCancelDkg();

  Future<void> crateApiSyncCancelSync();

  Future<void> crateApiDbChangeDbPassword(
      {required String dbFilepath,
      required String tmpDir,
      required String oldPassword,
      required String newPassword});

  Future<Folder> crateApiAccountCreateNewFolder({required String name});

  Future<void> crateApiAccountDeleteAccount({required int account});

  Stream<DKGStatus> crateApiFrostDoDkg();

  Stream<SigningStatus> crateApiFrostDoSign();

  Future<Uint8List> crateApiAccountExportAccount(
      {required int id, required String passphrase});

  Future<Uint8List> crateApiPayExtractTransaction(
      {required PcztPackage package});

  Future<List<TAddressTxCount>> crateApiAccountFetchTransparentAddressTxCount();

  Future<FrostSignParams> crateApiFrostFrostSignParamsDefault();

  Future<String?> crateApiAccountGenerateNextChangeAddress();

  Future<int> crateApiAccountGenerateNextDindex();

  String crateApiKeyGenerateSeed();

  Future<String?> crateApiAccountGetAccountFingerprint({required int account});

  Future<FrostParams?> crateApiAccountGetAccountFrostParams();

  Future<int> crateApiAccountGetAccountPools({required int account});

  Future<Seed?> crateApiAccountGetAccountSeed({required int account});

  Future<String> crateApiAccountGetAccountUfvk(
      {required int account, required int pools});

  Future<Addresses> crateApiAccountGetAddresses({required int uaPools});

  Future<double> crateApiNetworkGetCoingeckoPrice();

  Future<int> crateApiNetworkGetCurrentHeight();

  Future<int> crateApiSyncGetDbHeight();

  Future<List<String>> crateApiFrostGetDkgAddresses();

  int crateApiKeyGetKeyPools({required String key});

  Future<Uint8List> crateApiMempoolGetMempoolTx({required String txId});

  Future<String> crateApiNetworkGetNetworkName();

  Future<String?> crateApiDbGetProp({required String key});

  Future<TxAccount> crateApiAccountGetTxDetails({required int idTx});

  Future<void> crateApiSyncGetTxDetails();

  Future<bool> crateApiFrostHasDkgAddresses();

  Future<bool> crateApiFrostHasDkgParams();

  Future<void> crateApiAccountImportAccount(
      {required String passphrase, required List<int> data});

  Future<void> crateApiInitInitApp();

  Future<void> crateApiNetworkInitDatadir({required String directory});

  Future<void> crateApiFrostInitDkg();

  Future<void> crateApiFrostInitSign(
      {required int coordinator,
      required int fundingAccount,
      required PcztPackage pczt});

  Future<bool> crateApiFrostIsSigningInProgress();

  bool crateApiKeyIsTexAddress({required String address});

  bool crateApiKeyIsValidAddress({required String address});

  bool crateApiKeyIsValidFvk({required String fvk});

  bool crateApiKeyIsValidKey({required String key});

  bool crateApiKeyIsValidPhrase({required String phrase});

  bool crateApiKeyIsValidTransparentAddress({required String address});

  Future<List<Account>> crateApiAccountListAccounts();

  Future<List<String>> crateApiDbListDbNames({required String dir});

  Future<List<Memo>> crateApiAccountListMemos();

  Future<List<TxNote>> crateApiAccountListNotes();

  Future<List<Tx>> crateApiAccountListTxHistory();

  Future<void> crateApiAccountLockNote({required int id, required bool locked});

  Future<void> crateApiAccountMoveAccount(
      {required int oldPosition, required int newPosition});

  Future<int> crateApiAccountNewAccount({required NewAccount na});

  Future<void> crateApiDbOpenDatabase(
      {required String dbFilepath, String? password});

  Future<Uint8List> crateApiPayPackTransaction({required PcztPackage pczt});

  List<Recipient>? crateApiPayParsePaymentUri({required String uri});

  Future<PcztPackage> crateApiPayPrepare(
      {required List<Recipient> recipients, required PaymentOptions options});

  Future<void> crateApiAccountPrintKeys({required int id});

  Future<void> crateApiDbPutProp({required String key, required String value});

  Future<Receivers> crateApiAccountReceiversDefault();

  Receivers crateApiAccountReceiversFromUa({required String ua});

  Future<void> crateApiAccountRemoveAccount({required int accountId});

  Future<void> crateApiAccountReorderAccount(
      {required int oldPosition, required int newPosition});

  Future<void> crateApiFrostResetSign();

  Future<void> crateApiAccountResetSync({required int id});

  Future<void> crateApiSyncRewindSync(
      {required int height, required int account});

  Future<String> crateApiPaySend(
      {required int height, required List<int> data});

  Future<void> crateApiAccountSetAccount({required int account});

  Future<void> crateApiFrostSetDkgAddress(
      {required int id, required String address});

  Future<void> crateApiFrostSetDkgParams(
      {required String name,
      required int id,
      required int n,
      required int t,
      required int fundingAccount});

  Stream<LogMessage> crateApiInitSetLogStream();

  void crateApiNetworkSetLwd(
      {required ServerType serverType, required String lwd});

  void crateApiNetworkSetUseTor({required bool useTor});

  Future<PcztPackage> crateApiPaySignTransaction({required PcztPackage pczt});

  Stream<SyncProgress> crateApiSyncSynchronize(
      {required List<int> accounts,
      required int currentHeight,
      required int actionsPerSync,
      required int transparentLimit,
      required int checkpointAge});

  TxPlan crateApiPayToPlan({required PcztPackage package});

  Future<int> crateApiAccountTransparentSweep(
      {required int endHeight, required int gapLimit});

  String crateApiAccountUaFromUfvk({required String ufvk, int? di});

  Future<PcztPackage> crateApiPayUnpackTransaction({required List<int> bytes});

  Future<void> crateApiAccountUpdateAccount({required AccountUpdate update});

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Mempool;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Mempool;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MempoolPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiMempoolMempoolCancel({required Mempool that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMempool(
              that, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 1, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiMempoolMempoolCancelConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMempoolMempoolCancelConstMeta =>
      const TaskConstMeta(
        debugName: "Mempool_cancel",
        argNames: ["that"],
      );

  @override
  Mempool crateApiMempoolMempoolNew() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMempool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMempoolMempoolNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMempoolMempoolNewConstMeta => const TaskConstMeta(
        debugName: "Mempool_new",
        argNames: [],
      );

  @override
  Stream<MempoolMsg> crateApiMempoolMempoolRun(
      {required Mempool that, required int height}) {
    final mempoolSink = RustStreamSink<MempoolMsg>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMempool(
                that, serializer);
            sse_encode_StreamSink_mempool_msg_Sse(mempoolSink, serializer);
            sse_encode_u_32(height, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer,
                funcId: 3, port: port_);
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: sse_decode_AnyhowException,
          ),
          constMeta: kCrateApiMempoolMempoolRunConstMeta,
          argValues: [that, mempoolSink, height],
          apiImpl: this,
        ),
      ),
    );
    return mempoolSink.stream;
  }

  TaskConstMeta get kCrateApiMempoolMempoolRunConstMeta => const TaskConstMeta(
        debugName: "Mempool_run",
        argNames: ["that", "mempoolSink", "height"],
      );

  @override
  Future<PoolBalance> crateApiSyncBalance() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 4, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_pool_balance,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiSyncBalanceConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSyncBalanceConstMeta => const TaskConstMeta(
        debugName: "balance",
        argNames: [],
      );

  @override
  Future<String> crateApiPayBroadcastTransaction(
      {required int height, required List<int> txBytes}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(height, serializer);
          sse_encode_list_prim_u_8_loose(txBytes, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 5, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiPayBroadcastTransactionConstMeta,
        argValues: [height, txBytes],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiPayBroadcastTransactionConstMeta =>
      const TaskConstMeta(
        debugName: "broadcast_transaction",
        argNames: ["height", "txBytes"],
      );

  @override
  Future<String> crateApiPayBuildPuri({required List<Recipient> recipients}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_recipient(recipients, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 6, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiPayBuildPuriConstMeta,
        argValues: [recipients],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiPayBuildPuriConstMeta => const TaskConstMeta(
        debugName: "build_puri",
        argNames: ["recipients"],
      );

  @override
  Future<void> crateApiFrostCancelDkg() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 7, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFrostCancelDkgConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFrostCancelDkgConstMeta => const TaskConstMeta(
        debugName: "cancel_dkg",
        argNames: [],
      );

  @override
  Future<void> crateApiSyncCancelSync() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 8, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiSyncCancelSyncConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSyncCancelSyncConstMeta => const TaskConstMeta(
        debugName: "cancel_sync",
        argNames: [],
      );

  @override
  Future<void> crateApiDbChangeDbPassword(
      {required String dbFilepath,
      required String tmpDir,
      required String oldPassword,
      required String newPassword}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(dbFilepath, serializer);
          sse_encode_String(tmpDir, serializer);
          sse_encode_String(oldPassword, serializer);
          sse_encode_String(newPassword, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 9, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiDbChangeDbPasswordConstMeta,
        argValues: [dbFilepath, tmpDir, oldPassword, newPassword],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDbChangeDbPasswordConstMeta => const TaskConstMeta(
        debugName: "change_db_password",
        argNames: ["dbFilepath", "tmpDir", "oldPassword", "newPassword"],
      );

  @override
  Future<Folder> crateApiAccountCreateNewFolder({required String name}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(name, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 10, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_folder,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountCreateNewFolderConstMeta,
        argValues: [name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountCreateNewFolderConstMeta =>
      const TaskConstMeta(
        debugName: "create_new_folder",
        argNames: ["name"],
      );

  @override
  Future<void> crateApiAccountDeleteAccount({required int account}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(account, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 11, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountDeleteAccountConstMeta,
        argValues: [account],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountDeleteAccountConstMeta =>
      const TaskConstMeta(
        debugName: "delete_account",
        argNames: ["account"],
      );

  @override
  Stream<DKGStatus> crateApiFrostDoDkg() {
    final status = RustStreamSink<DKGStatus>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_StreamSink_dkg_status_Sse(status, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer,
                funcId: 12, port: port_);
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: sse_decode_AnyhowException,
          ),
          constMeta: kCrateApiFrostDoDkgConstMeta,
          argValues: [status],
          apiImpl: this,
        ),
      ),
    );
    return status.stream;
  }

  TaskConstMeta get kCrateApiFrostDoDkgConstMeta => const TaskConstMeta(
        debugName: "do_dkg",
        argNames: ["status"],
      );

  @override
  Stream<SigningStatus> crateApiFrostDoSign() {
    final status = RustStreamSink<SigningStatus>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_StreamSink_signing_status_Sse(status, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer,
                funcId: 13, port: port_);
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: sse_decode_AnyhowException,
          ),
          constMeta: kCrateApiFrostDoSignConstMeta,
          argValues: [status],
          apiImpl: this,
        ),
      ),
    );
    return status.stream;
  }

  TaskConstMeta get kCrateApiFrostDoSignConstMeta => const TaskConstMeta(
        debugName: "do_sign",
        argNames: ["status"],
      );

  @override
  Future<Uint8List> crateApiAccountExportAccount(
      {required int id, required String passphrase}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(id, serializer);
          sse_encode_String(passphrase, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 14, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountExportAccountConstMeta,
        argValues: [id, passphrase],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountExportAccountConstMeta =>
      const TaskConstMeta(
        debugName: "export_account",
        argNames: ["id", "passphrase"],
      );

  @override
  Future<Uint8List> crateApiPayExtractTransaction(
      {required PcztPackage package}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_pczt_package(package, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 15, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiPayExtractTransactionConstMeta,
        argValues: [package],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiPayExtractTransactionConstMeta =>
      const TaskConstMeta(
        debugName: "extract_transaction",
        argNames: ["package"],
      );

  @override
  Future<List<TAddressTxCount>>
      crateApiAccountFetchTransparentAddressTxCount() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 16, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_t_address_tx_count,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountFetchTransparentAddressTxCountConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountFetchTransparentAddressTxCountConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_transparent_address_tx_count",
        argNames: [],
      );

  @override
  Future<FrostSignParams> crateApiFrostFrostSignParamsDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 17, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_frost_sign_params,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiFrostFrostSignParamsDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFrostFrostSignParamsDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "frost_sign_params_default",
        argNames: [],
      );

  @override
  Future<String?> crateApiAccountGenerateNextChangeAddress() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 18, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountGenerateNextChangeAddressConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountGenerateNextChangeAddressConstMeta =>
      const TaskConstMeta(
        debugName: "generate_next_change_address",
        argNames: [],
      );

  @override
  Future<int> crateApiAccountGenerateNextDindex() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 19, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_32,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountGenerateNextDindexConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountGenerateNextDindexConstMeta =>
      const TaskConstMeta(
        debugName: "generate_next_dindex",
        argNames: [],
      );

  @override
  String crateApiKeyGenerateSeed() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiKeyGenerateSeedConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiKeyGenerateSeedConstMeta => const TaskConstMeta(
        debugName: "generate_seed",
        argNames: [],
      );

  @override
  Future<String?> crateApiAccountGetAccountFingerprint({required int account}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(account, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 21, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountGetAccountFingerprintConstMeta,
        argValues: [account],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountGetAccountFingerprintConstMeta =>
      const TaskConstMeta(
        debugName: "get_account_fingerprint",
        argNames: ["account"],
      );

  @override
  Future<FrostParams?> crateApiAccountGetAccountFrostParams() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 22, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_frost_params,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountGetAccountFrostParamsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountGetAccountFrostParamsConstMeta =>
      const TaskConstMeta(
        debugName: "get_account_frost_params",
        argNames: [],
      );

  @override
  Future<int> crateApiAccountGetAccountPools({required int account}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(account, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 23, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_8,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountGetAccountPoolsConstMeta,
        argValues: [account],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountGetAccountPoolsConstMeta =>
      const TaskConstMeta(
        debugName: "get_account_pools",
        argNames: ["account"],
      );

  @override
  Future<Seed?> crateApiAccountGetAccountSeed({required int account}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(account, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 24, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_seed,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountGetAccountSeedConstMeta,
        argValues: [account],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountGetAccountSeedConstMeta =>
      const TaskConstMeta(
        debugName: "get_account_seed",
        argNames: ["account"],
      );

  @override
  Future<String> crateApiAccountGetAccountUfvk(
      {required int account, required int pools}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(account, serializer);
          sse_encode_u_8(pools, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 25, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountGetAccountUfvkConstMeta,
        argValues: [account, pools],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountGetAccountUfvkConstMeta =>
      const TaskConstMeta(
        debugName: "get_account_ufvk",
        argNames: ["account", "pools"],
      );

  @override
  Future<Addresses> crateApiAccountGetAddresses({required int uaPools}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_8(uaPools, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 26, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_addresses,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountGetAddressesConstMeta,
        argValues: [uaPools],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountGetAddressesConstMeta =>
      const TaskConstMeta(
        debugName: "get_addresses",
        argNames: ["uaPools"],
      );

  @override
  Future<double> crateApiNetworkGetCoingeckoPrice() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 27, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_64,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiNetworkGetCoingeckoPriceConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiNetworkGetCoingeckoPriceConstMeta =>
      const TaskConstMeta(
        debugName: "get_coingecko_price",
        argNames: [],
      );

  @override
  Future<int> crateApiNetworkGetCurrentHeight() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 28, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_32,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiNetworkGetCurrentHeightConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiNetworkGetCurrentHeightConstMeta =>
      const TaskConstMeta(
        debugName: "get_current_height",
        argNames: [],
      );

  @override
  Future<int> crateApiSyncGetDbHeight() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 29, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_32,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiSyncGetDbHeightConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSyncGetDbHeightConstMeta => const TaskConstMeta(
        debugName: "get_db_height",
        argNames: [],
      );

  @override
  Future<List<String>> crateApiFrostGetDkgAddresses() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 30, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFrostGetDkgAddressesConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFrostGetDkgAddressesConstMeta =>
      const TaskConstMeta(
        debugName: "get_dkg_addresses",
        argNames: [],
      );

  @override
  int crateApiKeyGetKeyPools({required String key}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(key, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_8,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiKeyGetKeyPoolsConstMeta,
        argValues: [key],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiKeyGetKeyPoolsConstMeta => const TaskConstMeta(
        debugName: "get_key_pools",
        argNames: ["key"],
      );

  @override
  Future<Uint8List> crateApiMempoolGetMempoolTx({required String txId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(txId, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 32, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiMempoolGetMempoolTxConstMeta,
        argValues: [txId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMempoolGetMempoolTxConstMeta =>
      const TaskConstMeta(
        debugName: "get_mempool_tx",
        argNames: ["txId"],
      );

  @override
  Future<String> crateApiNetworkGetNetworkName() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 33, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiNetworkGetNetworkNameConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiNetworkGetNetworkNameConstMeta =>
      const TaskConstMeta(
        debugName: "get_network_name",
        argNames: [],
      );

  @override
  Future<String?> crateApiDbGetProp({required String key}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(key, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 34, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiDbGetPropConstMeta,
        argValues: [key],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDbGetPropConstMeta => const TaskConstMeta(
        debugName: "get_prop",
        argNames: ["key"],
      );

  @override
  Future<TxAccount> crateApiAccountGetTxDetails({required int idTx}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(idTx, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 35, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_tx_account,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountGetTxDetailsConstMeta,
        argValues: [idTx],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountGetTxDetailsConstMeta =>
      const TaskConstMeta(
        debugName: "get_tx_details",
        argNames: ["idTx"],
      );

  @override
  Future<void> crateApiSyncGetTxDetails() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 36, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiSyncGetTxDetailsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSyncGetTxDetailsConstMeta => const TaskConstMeta(
        debugName: "get_tx_details",
        argNames: [],
      );

  @override
  Future<bool> crateApiFrostHasDkgAddresses() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 37, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFrostHasDkgAddressesConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFrostHasDkgAddressesConstMeta =>
      const TaskConstMeta(
        debugName: "has_dkg_addresses",
        argNames: [],
      );

  @override
  Future<bool> crateApiFrostHasDkgParams() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 38, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFrostHasDkgParamsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFrostHasDkgParamsConstMeta => const TaskConstMeta(
        debugName: "has_dkg_params",
        argNames: [],
      );

  @override
  Future<void> crateApiAccountImportAccount(
      {required String passphrase, required List<int> data}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(passphrase, serializer);
          sse_encode_list_prim_u_8_loose(data, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 39, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountImportAccountConstMeta,
        argValues: [passphrase, data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountImportAccountConstMeta =>
      const TaskConstMeta(
        debugName: "import_account",
        argNames: ["passphrase", "data"],
      );

  @override
  Future<void> crateApiInitInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 40, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiInitInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiInitInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<void> crateApiNetworkInitDatadir({required String directory}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(directory, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 41, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiNetworkInitDatadirConstMeta,
        argValues: [directory],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiNetworkInitDatadirConstMeta => const TaskConstMeta(
        debugName: "init_datadir",
        argNames: ["directory"],
      );

  @override
  Future<void> crateApiFrostInitDkg() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 42, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFrostInitDkgConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFrostInitDkgConstMeta => const TaskConstMeta(
        debugName: "init_dkg",
        argNames: [],
      );

  @override
  Future<void> crateApiFrostInitSign(
      {required int coordinator,
      required int fundingAccount,
      required PcztPackage pczt}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_16(coordinator, serializer);
          sse_encode_u_32(fundingAccount, serializer);
          sse_encode_box_autoadd_pczt_package(pczt, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 43, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFrostInitSignConstMeta,
        argValues: [coordinator, fundingAccount, pczt],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFrostInitSignConstMeta => const TaskConstMeta(
        debugName: "init_sign",
        argNames: ["coordinator", "fundingAccount", "pczt"],
      );

  @override
  Future<bool> crateApiFrostIsSigningInProgress() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 44, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFrostIsSigningInProgressConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFrostIsSigningInProgressConstMeta =>
      const TaskConstMeta(
        debugName: "is_signing_in_progress",
        argNames: [],
      );

  @override
  bool crateApiKeyIsTexAddress({required String address}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(address, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 45)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiKeyIsTexAddressConstMeta,
        argValues: [address],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiKeyIsTexAddressConstMeta => const TaskConstMeta(
        debugName: "is_tex_address",
        argNames: ["address"],
      );

  @override
  bool crateApiKeyIsValidAddress({required String address}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(address, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 46)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiKeyIsValidAddressConstMeta,
        argValues: [address],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiKeyIsValidAddressConstMeta => const TaskConstMeta(
        debugName: "is_valid_address",
        argNames: ["address"],
      );

  @override
  bool crateApiKeyIsValidFvk({required String fvk}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(fvk, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 47)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiKeyIsValidFvkConstMeta,
        argValues: [fvk],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiKeyIsValidFvkConstMeta => const TaskConstMeta(
        debugName: "is_valid_fvk",
        argNames: ["fvk"],
      );

  @override
  bool crateApiKeyIsValidKey({required String key}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(key, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 48)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiKeyIsValidKeyConstMeta,
        argValues: [key],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiKeyIsValidKeyConstMeta => const TaskConstMeta(
        debugName: "is_valid_key",
        argNames: ["key"],
      );

  @override
  bool crateApiKeyIsValidPhrase({required String phrase}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(phrase, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 49)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiKeyIsValidPhraseConstMeta,
        argValues: [phrase],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiKeyIsValidPhraseConstMeta => const TaskConstMeta(
        debugName: "is_valid_phrase",
        argNames: ["phrase"],
      );

  @override
  bool crateApiKeyIsValidTransparentAddress({required String address}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(address, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 50)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiKeyIsValidTransparentAddressConstMeta,
        argValues: [address],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiKeyIsValidTransparentAddressConstMeta =>
      const TaskConstMeta(
        debugName: "is_valid_transparent_address",
        argNames: ["address"],
      );

  @override
  Future<List<Account>> crateApiAccountListAccounts() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 51, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_account,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountListAccountsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountListAccountsConstMeta =>
      const TaskConstMeta(
        debugName: "list_accounts",
        argNames: [],
      );

  @override
  Future<List<String>> crateApiDbListDbNames({required String dir}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(dir, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 52, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiDbListDbNamesConstMeta,
        argValues: [dir],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDbListDbNamesConstMeta => const TaskConstMeta(
        debugName: "list_db_names",
        argNames: ["dir"],
      );

  @override
  Future<List<Memo>> crateApiAccountListMemos() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 53, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_memo,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountListMemosConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountListMemosConstMeta => const TaskConstMeta(
        debugName: "list_memos",
        argNames: [],
      );

  @override
  Future<List<TxNote>> crateApiAccountListNotes() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 54, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_tx_note,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountListNotesConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountListNotesConstMeta => const TaskConstMeta(
        debugName: "list_notes",
        argNames: [],
      );

  @override
  Future<List<Tx>> crateApiAccountListTxHistory() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 55, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_tx,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountListTxHistoryConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountListTxHistoryConstMeta =>
      const TaskConstMeta(
        debugName: "list_tx_history",
        argNames: [],
      );

  @override
  Future<void> crateApiAccountLockNote(
      {required int id, required bool locked}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(id, serializer);
          sse_encode_bool(locked, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 56, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountLockNoteConstMeta,
        argValues: [id, locked],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountLockNoteConstMeta => const TaskConstMeta(
        debugName: "lock_note",
        argNames: ["id", "locked"],
      );

  @override
  Future<void> crateApiAccountMoveAccount(
      {required int oldPosition, required int newPosition}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(oldPosition, serializer);
          sse_encode_u_32(newPosition, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 57, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountMoveAccountConstMeta,
        argValues: [oldPosition, newPosition],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountMoveAccountConstMeta => const TaskConstMeta(
        debugName: "move_account",
        argNames: ["oldPosition", "newPosition"],
      );

  @override
  Future<int> crateApiAccountNewAccount({required NewAccount na}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_new_account(na, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 58, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_32,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountNewAccountConstMeta,
        argValues: [na],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountNewAccountConstMeta => const TaskConstMeta(
        debugName: "new_account",
        argNames: ["na"],
      );

  @override
  Future<void> crateApiDbOpenDatabase(
      {required String dbFilepath, String? password}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(dbFilepath, serializer);
          sse_encode_opt_String(password, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 59, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiDbOpenDatabaseConstMeta,
        argValues: [dbFilepath, password],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDbOpenDatabaseConstMeta => const TaskConstMeta(
        debugName: "open_database",
        argNames: ["dbFilepath", "password"],
      );

  @override
  Future<Uint8List> crateApiPayPackTransaction({required PcztPackage pczt}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_pczt_package(pczt, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 60, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiPayPackTransactionConstMeta,
        argValues: [pczt],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiPayPackTransactionConstMeta => const TaskConstMeta(
        debugName: "pack_transaction",
        argNames: ["pczt"],
      );

  @override
  List<Recipient>? crateApiPayParsePaymentUri({required String uri}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(uri, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 61)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_list_recipient,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiPayParsePaymentUriConstMeta,
        argValues: [uri],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiPayParsePaymentUriConstMeta => const TaskConstMeta(
        debugName: "parse_payment_uri",
        argNames: ["uri"],
      );

  @override
  Future<PcztPackage> crateApiPayPrepare(
      {required List<Recipient> recipients, required PaymentOptions options}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_recipient(recipients, serializer);
          sse_encode_box_autoadd_payment_options(options, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 62, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_pczt_package,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiPayPrepareConstMeta,
        argValues: [recipients, options],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiPayPrepareConstMeta => const TaskConstMeta(
        debugName: "prepare",
        argNames: ["recipients", "options"],
      );

  @override
  Future<void> crateApiAccountPrintKeys({required int id}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(id, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 63, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountPrintKeysConstMeta,
        argValues: [id],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountPrintKeysConstMeta => const TaskConstMeta(
        debugName: "print_keys",
        argNames: ["id"],
      );

  @override
  Future<void> crateApiDbPutProp({required String key, required String value}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(key, serializer);
          sse_encode_String(value, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 64, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiDbPutPropConstMeta,
        argValues: [key, value],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDbPutPropConstMeta => const TaskConstMeta(
        debugName: "put_prop",
        argNames: ["key", "value"],
      );

  @override
  Future<Receivers> crateApiAccountReceiversDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 65, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_receivers,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiAccountReceiversDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountReceiversDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "receivers_default",
        argNames: [],
      );

  @override
  Receivers crateApiAccountReceiversFromUa({required String ua}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(ua, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 66)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_receivers,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountReceiversFromUaConstMeta,
        argValues: [ua],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountReceiversFromUaConstMeta =>
      const TaskConstMeta(
        debugName: "receivers_from_ua",
        argNames: ["ua"],
      );

  @override
  Future<void> crateApiAccountRemoveAccount({required int accountId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(accountId, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 67, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountRemoveAccountConstMeta,
        argValues: [accountId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountRemoveAccountConstMeta =>
      const TaskConstMeta(
        debugName: "remove_account",
        argNames: ["accountId"],
      );

  @override
  Future<void> crateApiAccountReorderAccount(
      {required int oldPosition, required int newPosition}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(oldPosition, serializer);
          sse_encode_u_32(newPosition, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 68, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountReorderAccountConstMeta,
        argValues: [oldPosition, newPosition],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountReorderAccountConstMeta =>
      const TaskConstMeta(
        debugName: "reorder_account",
        argNames: ["oldPosition", "newPosition"],
      );

  @override
  Future<void> crateApiFrostResetSign() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 69, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFrostResetSignConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFrostResetSignConstMeta => const TaskConstMeta(
        debugName: "reset_sign",
        argNames: [],
      );

  @override
  Future<void> crateApiAccountResetSync({required int id}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(id, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 70, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountResetSyncConstMeta,
        argValues: [id],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountResetSyncConstMeta => const TaskConstMeta(
        debugName: "reset_sync",
        argNames: ["id"],
      );

  @override
  Future<void> crateApiSyncRewindSync(
      {required int height, required int account}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(height, serializer);
          sse_encode_u_32(account, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 71, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiSyncRewindSyncConstMeta,
        argValues: [height, account],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSyncRewindSyncConstMeta => const TaskConstMeta(
        debugName: "rewind_sync",
        argNames: ["height", "account"],
      );

  @override
  Future<String> crateApiPaySend(
      {required int height, required List<int> data}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(height, serializer);
          sse_encode_list_prim_u_8_loose(data, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 72, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiPaySendConstMeta,
        argValues: [height, data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiPaySendConstMeta => const TaskConstMeta(
        debugName: "send",
        argNames: ["height", "data"],
      );

  @override
  Future<void> crateApiAccountSetAccount({required int account}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(account, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 73, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountSetAccountConstMeta,
        argValues: [account],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountSetAccountConstMeta => const TaskConstMeta(
        debugName: "set_account",
        argNames: ["account"],
      );

  @override
  Future<void> crateApiFrostSetDkgAddress(
      {required int id, required String address}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_16(id, serializer);
          sse_encode_String(address, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 74, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFrostSetDkgAddressConstMeta,
        argValues: [id, address],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFrostSetDkgAddressConstMeta => const TaskConstMeta(
        debugName: "set_dkg_address",
        argNames: ["id", "address"],
      );

  @override
  Future<void> crateApiFrostSetDkgParams(
      {required String name,
      required int id,
      required int n,
      required int t,
      required int fundingAccount}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(name, serializer);
          sse_encode_u_8(id, serializer);
          sse_encode_u_8(n, serializer);
          sse_encode_u_8(t, serializer);
          sse_encode_u_32(fundingAccount, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 75, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFrostSetDkgParamsConstMeta,
        argValues: [name, id, n, t, fundingAccount],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFrostSetDkgParamsConstMeta => const TaskConstMeta(
        debugName: "set_dkg_params",
        argNames: ["name", "id", "n", "t", "fundingAccount"],
      );

  @override
  Stream<LogMessage> crateApiInitSetLogStream() {
    final s = RustStreamSink<LogMessage>();
    handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_StreamSink_log_message_Sse(s, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 76)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiInitSetLogStreamConstMeta,
        argValues: [s],
        apiImpl: this,
      ),
    );
    return s.stream;
  }

  TaskConstMeta get kCrateApiInitSetLogStreamConstMeta => const TaskConstMeta(
        debugName: "set_log_stream",
        argNames: ["s"],
      );

  @override
  void crateApiNetworkSetLwd(
      {required ServerType serverType, required String lwd}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_server_type(serverType, serializer);
          sse_encode_String(lwd, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 77)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiNetworkSetLwdConstMeta,
        argValues: [serverType, lwd],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiNetworkSetLwdConstMeta => const TaskConstMeta(
        debugName: "set_lwd",
        argNames: ["serverType", "lwd"],
      );

  @override
  void crateApiNetworkSetUseTor({required bool useTor}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_bool(useTor, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 78)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiNetworkSetUseTorConstMeta,
        argValues: [useTor],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiNetworkSetUseTorConstMeta => const TaskConstMeta(
        debugName: "set_use_tor",
        argNames: ["useTor"],
      );

  @override
  Future<PcztPackage> crateApiPaySignTransaction({required PcztPackage pczt}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_pczt_package(pczt, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 79, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_pczt_package,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiPaySignTransactionConstMeta,
        argValues: [pczt],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiPaySignTransactionConstMeta => const TaskConstMeta(
        debugName: "sign_transaction",
        argNames: ["pczt"],
      );

  @override
  Stream<SyncProgress> crateApiSyncSynchronize(
      {required List<int> accounts,
      required int currentHeight,
      required int actionsPerSync,
      required int transparentLimit,
      required int checkpointAge}) {
    final progress = RustStreamSink<SyncProgress>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_StreamSink_sync_progress_Sse(progress, serializer);
            sse_encode_list_prim_u_32_loose(accounts, serializer);
            sse_encode_u_32(currentHeight, serializer);
            sse_encode_u_32(actionsPerSync, serializer);
            sse_encode_u_32(transparentLimit, serializer);
            sse_encode_u_32(checkpointAge, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer,
                funcId: 80, port: port_);
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: sse_decode_AnyhowException,
          ),
          constMeta: kCrateApiSyncSynchronizeConstMeta,
          argValues: [
            progress,
            accounts,
            currentHeight,
            actionsPerSync,
            transparentLimit,
            checkpointAge
          ],
          apiImpl: this,
        ),
      ),
    );
    return progress.stream;
  }

  TaskConstMeta get kCrateApiSyncSynchronizeConstMeta => const TaskConstMeta(
        debugName: "synchronize",
        argNames: [
          "progress",
          "accounts",
          "currentHeight",
          "actionsPerSync",
          "transparentLimit",
          "checkpointAge"
        ],
      );

  @override
  TxPlan crateApiPayToPlan({required PcztPackage package}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_pczt_package(package, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 81)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_tx_plan,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiPayToPlanConstMeta,
        argValues: [package],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiPayToPlanConstMeta => const TaskConstMeta(
        debugName: "to_plan",
        argNames: ["package"],
      );

  @override
  Future<int> crateApiAccountTransparentSweep(
      {required int endHeight, required int gapLimit}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(endHeight, serializer);
          sse_encode_u_32(gapLimit, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 82, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_32,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountTransparentSweepConstMeta,
        argValues: [endHeight, gapLimit],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountTransparentSweepConstMeta =>
      const TaskConstMeta(
        debugName: "transparent_sweep",
        argNames: ["endHeight", "gapLimit"],
      );

  @override
  String crateApiAccountUaFromUfvk({required String ufvk, int? di}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(ufvk, serializer);
          sse_encode_opt_box_autoadd_u_32(di, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 83)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountUaFromUfvkConstMeta,
        argValues: [ufvk, di],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountUaFromUfvkConstMeta => const TaskConstMeta(
        debugName: "ua_from_ufvk",
        argNames: ["ufvk", "di"],
      );

  @override
  Future<PcztPackage> crateApiPayUnpackTransaction({required List<int> bytes}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_prim_u_8_loose(bytes, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 84, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_pczt_package,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiPayUnpackTransactionConstMeta,
        argValues: [bytes],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiPayUnpackTransactionConstMeta =>
      const TaskConstMeta(
        debugName: "unpack_transaction",
        argNames: ["bytes"],
      );

  @override
  Future<void> crateApiAccountUpdateAccount({required AccountUpdate update}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_account_update(update, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 85, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAccountUpdateAccountConstMeta,
        argValues: [update],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountUpdateAccountConstMeta =>
      const TaskConstMeta(
        debugName: "update_account",
        argNames: ["update"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Mempool => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMempool;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Mempool => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMempool;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  Mempool
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMempool(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MempoolImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Mempool
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMempool(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MempoolImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Mempool
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMempool(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MempoolImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<DKGStatus> dco_decode_StreamSink_dkg_status_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<LogMessage> dco_decode_StreamSink_log_message_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<MempoolMsg> dco_decode_StreamSink_mempool_msg_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<SigningStatus> dco_decode_StreamSink_signing_status_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<SyncProgress> dco_decode_StreamSink_sync_progress_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Account dco_decode_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 14)
      throw Exception('unexpected arr length: expect 14 but see ${arr.length}');
    return Account(
      coin: dco_decode_u_8(arr[0]),
      id: dco_decode_u_32(arr[1]),
      name: dco_decode_String(arr[2]),
      seed: dco_decode_opt_String(arr[3]),
      aindex: dco_decode_u_32(arr[4]),
      icon: dco_decode_opt_list_prim_u_8_strict(arr[5]),
      birth: dco_decode_u_32(arr[6]),
      position: dco_decode_u_8(arr[7]),
      hidden: dco_decode_bool(arr[8]),
      saved: dco_decode_bool(arr[9]),
      enabled: dco_decode_bool(arr[10]),
      internal: dco_decode_bool(arr[11]),
      height: dco_decode_u_32(arr[12]),
      balance: dco_decode_u_64(arr[13]),
    );
  }

  @protected
  AccountUpdate dco_decode_account_update(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return AccountUpdate(
      coin: dco_decode_u_8(arr[0]),
      id: dco_decode_u_32(arr[1]),
      name: dco_decode_opt_String(arr[2]),
      icon: dco_decode_opt_list_prim_u_8_strict(arr[3]),
      birth: dco_decode_opt_box_autoadd_u_32(arr[4]),
      folder: dco_decode_String(arr[5]),
      hidden: dco_decode_opt_box_autoadd_bool(arr[6]),
      enabled: dco_decode_opt_box_autoadd_bool(arr[7]),
    );
  }

  @protected
  Addresses dco_decode_addresses(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Addresses(
      taddr: dco_decode_opt_String(arr[0]),
      saddr: dco_decode_opt_String(arr[1]),
      oaddr: dco_decode_opt_String(arr[2]),
      ua: dco_decode_opt_String(arr[3]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  AccountUpdate dco_decode_box_autoadd_account_update(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_account_update(raw);
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  FrostParams dco_decode_box_autoadd_frost_params(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_frost_params(raw);
  }

  @protected
  NewAccount dco_decode_box_autoadd_new_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_new_account(raw);
  }

  @protected
  PaymentOptions dco_decode_box_autoadd_payment_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_payment_options(raw);
  }

  @protected
  PcztPackage dco_decode_box_autoadd_pczt_package(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_pczt_package(raw);
  }

  @protected
  Seed dco_decode_box_autoadd_seed(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_seed(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  DKGStatus dco_decode_dkg_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DKGStatus_WaitParams();
      case 1:
        return DKGStatus_WaitAddresses(
          dco_decode_list_String(raw[1]),
        );
      case 2:
        return DKGStatus_PublishRound1Pkg();
      case 3:
        return DKGStatus_WaitRound1Pkg();
      case 4:
        return DKGStatus_PublishRound2Pkg();
      case 5:
        return DKGStatus_WaitRound2Pkg();
      case 6:
        return DKGStatus_Finalize();
      case 7:
        return DKGStatus_SharedAddress(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  DustChangePolicy dco_decode_dust_change_policy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DustChangePolicy.values[raw as int];
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  Folder dco_decode_folder(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Folder(
      id: dco_decode_u_32(arr[0]),
      name: dco_decode_String(arr[1]),
    );
  }

  @protected
  FrostParams dco_decode_frost_params(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return FrostParams(
      id: dco_decode_u_8(arr[0]),
      n: dco_decode_u_8(arr[1]),
      t: dco_decode_u_8(arr[2]),
    );
  }

  @protected
  FrostSignParams dco_decode_frost_sign_params(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FrostSignParams(
      coordinator: dco_decode_u_16(arr[0]),
      fundingAccount: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<Account> dco_decode_list_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_account).toList();
  }

  @protected
  List<Memo> dco_decode_list_memo(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_memo).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_32_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint32List dco_decode_list_prim_u_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint32List;
  }

  @protected
  Uint64List dco_decode_list_prim_u_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeUint64List(raw);
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  Uint64List dco_decode_list_prim_usize_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint64List;
  }

  @protected
  List<Recipient> dco_decode_list_recipient(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_recipient).toList();
  }

  @protected
  List<(int, String, PlatformInt64)> dco_decode_list_record_u_32_string_i_64(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_u_32_string_i_64)
        .toList();
  }

  @protected
  List<TAddressTxCount> dco_decode_list_t_address_tx_count(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_t_address_tx_count).toList();
  }

  @protected
  List<Tx> dco_decode_list_tx(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tx).toList();
  }

  @protected
  List<TxMemo> dco_decode_list_tx_memo(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tx_memo).toList();
  }

  @protected
  List<TxNote> dco_decode_list_tx_note(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tx_note).toList();
  }

  @protected
  List<TxOutput> dco_decode_list_tx_output(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tx_output).toList();
  }

  @protected
  List<TxPlanIn> dco_decode_list_tx_plan_in(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tx_plan_in).toList();
  }

  @protected
  List<TxPlanOut> dco_decode_list_tx_plan_out(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tx_plan_out).toList();
  }

  @protected
  List<TxSpend> dco_decode_list_tx_spend(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tx_spend).toList();
  }

  @protected
  LogMessage dco_decode_log_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return LogMessage(
      level: dco_decode_u_8(arr[0]),
      message: dco_decode_String(arr[1]),
      span: dco_decode_opt_String(arr[2]),
    );
  }

  @protected
  Memo dco_decode_memo(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return Memo(
      id: dco_decode_u_32(arr[0]),
      idTx: dco_decode_u_32(arr[1]),
      idNote: dco_decode_opt_box_autoadd_u_32(arr[2]),
      pool: dco_decode_u_8(arr[3]),
      height: dco_decode_u_32(arr[4]),
      vout: dco_decode_u_32(arr[5]),
      time: dco_decode_u_32(arr[6]),
      memoBytes: dco_decode_list_prim_u_8_strict(arr[7]),
      memo: dco_decode_opt_String(arr[8]),
    );
  }

  @protected
  MempoolMsg dco_decode_mempool_msg(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return MempoolMsg_TxId(
          dco_decode_String(raw[1]),
          dco_decode_list_record_u_32_string_i_64(raw[2]),
          dco_decode_u_32(raw[3]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  NewAccount dco_decode_new_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 12)
      throw Exception('unexpected arr length: expect 12 but see ${arr.length}');
    return NewAccount(
      icon: dco_decode_opt_list_prim_u_8_strict(arr[0]),
      name: dco_decode_String(arr[1]),
      restore: dco_decode_bool(arr[2]),
      key: dco_decode_String(arr[3]),
      passphrase: dco_decode_opt_String(arr[4]),
      fingerprint: dco_decode_opt_list_prim_u_8_strict(arr[5]),
      aindex: dco_decode_u_32(arr[6]),
      birth: dco_decode_opt_box_autoadd_u_32(arr[7]),
      folder: dco_decode_String(arr[8]),
      pools: dco_decode_opt_box_autoadd_u_8(arr[9]),
      useInternal: dco_decode_bool(arr[10]),
      internal: dco_decode_bool(arr[11]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  FrostParams? dco_decode_opt_box_autoadd_frost_params(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_frost_params(raw);
  }

  @protected
  Seed? dco_decode_opt_box_autoadd_seed(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_seed(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_8(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  List<Recipient>? dco_decode_opt_list_recipient(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_recipient(raw);
  }

  @protected
  PaymentOptions dco_decode_payment_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return PaymentOptions(
      srcPools: dco_decode_u_8(arr[0]),
      recipientPaysFee: dco_decode_bool(arr[1]),
      smartTransparent: dco_decode_bool(arr[2]),
      dustChangePolicy: dco_decode_dust_change_policy(arr[3]),
    );
  }

  @protected
  PcztPackage dco_decode_pczt_package(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return PcztPackage(
      pczt: dco_decode_list_prim_u_8_strict(arr[0]),
      nSpends: dco_decode_usize_array_3(arr[1]),
      saplingIndices: dco_decode_list_prim_usize_strict(arr[2]),
      orchardIndices: dco_decode_list_prim_usize_strict(arr[3]),
      canSign: dco_decode_bool(arr[4]),
      canBroadcast: dco_decode_bool(arr[5]),
    );
  }

  @protected
  PoolBalance dco_decode_pool_balance(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PoolBalance(
      field0: dco_decode_list_prim_u_64_strict(arr[0]),
    );
  }

  @protected
  Receivers dco_decode_receivers(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Receivers(
      taddr: dco_decode_opt_String(arr[0]),
      saddr: dco_decode_opt_String(arr[1]),
      oaddr: dco_decode_opt_String(arr[2]),
    );
  }

  @protected
  Recipient dco_decode_recipient(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return Recipient(
      address: dco_decode_String(arr[0]),
      amount: dco_decode_u_64(arr[1]),
      pools: dco_decode_opt_box_autoadd_u_8(arr[2]),
      userMemo: dco_decode_opt_String(arr[3]),
      memoBytes: dco_decode_opt_list_prim_u_8_strict(arr[4]),
    );
  }

  @protected
  (int, String, PlatformInt64) dco_decode_record_u_32_string_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      dco_decode_u_32(arr[0]),
      dco_decode_String(arr[1]),
      dco_decode_i_64(arr[2]),
    );
  }

  @protected
  Seed dco_decode_seed(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Seed(
      mnemonic: dco_decode_String(arr[0]),
      phrase: dco_decode_String(arr[1]),
      aindex: dco_decode_u_32(arr[2]),
    );
  }

  @protected
  ServerType dco_decode_server_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ServerType.values[raw as int];
  }

  @protected
  SigningStatus dco_decode_signing_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SigningStatus_SendingCommitment();
      case 1:
        return SigningStatus_WaitingForCommitments();
      case 2:
        return SigningStatus_SendingSigningPackage();
      case 3:
        return SigningStatus_WaitingForSigningPackage();
      case 4:
        return SigningStatus_SendingSignatureShare();
      case 5:
        return SigningStatus_SigningCompleted();
      case 6:
        return SigningStatus_WaitingForSignatureShares();
      case 7:
        return SigningStatus_PreparingTransaction();
      case 8:
        return SigningStatus_SendingTransaction();
      case 9:
        return SigningStatus_TransactionSent(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  SyncProgress dco_decode_sync_progress(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SyncProgress(
      height: dco_decode_u_32(arr[0]),
      time: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  TAddressTxCount dco_decode_t_address_tx_count(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return TAddressTxCount(
      address: dco_decode_String(arr[0]),
      scope: dco_decode_u_8(arr[1]),
      dindex: dco_decode_u_32(arr[2]),
      amount: dco_decode_u_64(arr[3]),
      txCount: dco_decode_u_32(arr[4]),
      time: dco_decode_u_32(arr[5]),
    );
  }

  @protected
  Tx dco_decode_tx(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Tx(
      id: dco_decode_u_32(arr[0]),
      txid: dco_decode_list_prim_u_8_strict(arr[1]),
      height: dco_decode_u_32(arr[2]),
      time: dco_decode_u_32(arr[3]),
      value: dco_decode_i_64(arr[4]),
      tpe: dco_decode_opt_box_autoadd_u_8(arr[5]),
    );
  }

  @protected
  TxAccount dco_decode_tx_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return TxAccount(
      id: dco_decode_u_32(arr[0]),
      account: dco_decode_u_32(arr[1]),
      txid: dco_decode_list_prim_u_8_strict(arr[2]),
      height: dco_decode_u_32(arr[3]),
      time: dco_decode_u_32(arr[4]),
      notes: dco_decode_list_tx_note(arr[5]),
      spends: dco_decode_list_tx_spend(arr[6]),
      outputs: dco_decode_list_tx_output(arr[7]),
      memos: dco_decode_list_tx_memo(arr[8]),
    );
  }

  @protected
  TxMemo dco_decode_tx_memo(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TxMemo(
      note: dco_decode_opt_box_autoadd_u_32(arr[0]),
      output: dco_decode_opt_box_autoadd_u_32(arr[1]),
      pool: dco_decode_u_8(arr[2]),
      memo: dco_decode_opt_String(arr[3]),
    );
  }

  @protected
  TxNote dco_decode_tx_note(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return TxNote(
      id: dco_decode_u_32(arr[0]),
      pool: dco_decode_u_8(arr[1]),
      height: dco_decode_u_32(arr[2]),
      value: dco_decode_u_64(arr[3]),
      locked: dco_decode_bool(arr[4]),
    );
  }

  @protected
  TxOutput dco_decode_tx_output(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return TxOutput(
      id: dco_decode_u_32(arr[0]),
      pool: dco_decode_u_8(arr[1]),
      height: dco_decode_u_32(arr[2]),
      value: dco_decode_u_64(arr[3]),
      address: dco_decode_String(arr[4]),
    );
  }

  @protected
  TxPlan dco_decode_tx_plan(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return TxPlan(
      height: dco_decode_u_32(arr[0]),
      inputs: dco_decode_list_tx_plan_in(arr[1]),
      outputs: dco_decode_list_tx_plan_out(arr[2]),
      fee: dco_decode_u_64(arr[3]),
      canSign: dco_decode_bool(arr[4]),
      canBroadcast: dco_decode_bool(arr[5]),
    );
  }

  @protected
  TxPlanIn dco_decode_tx_plan_in(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TxPlanIn(
      pool: dco_decode_u_8(arr[0]),
      amount: dco_decode_opt_box_autoadd_u_64(arr[1]),
    );
  }

  @protected
  TxPlanOut dco_decode_tx_plan_out(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TxPlanOut(
      pool: dco_decode_u_8(arr[0]),
      amount: dco_decode_u_64(arr[1]),
      address: dco_decode_String(arr[2]),
    );
  }

  @protected
  TxSpend dco_decode_tx_spend(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TxSpend(
      id: dco_decode_u_32(arr[0]),
      pool: dco_decode_u_8(arr[1]),
      height: dco_decode_u_32(arr[2]),
      value: dco_decode_u_64(arr[3]),
    );
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  UsizeArray3 dco_decode_usize_array_3(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UsizeArray3(dco_decode_list_prim_usize_strict(raw));
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  Mempool
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMempool(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MempoolImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Mempool
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMempool(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MempoolImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Mempool
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMempool(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MempoolImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<DKGStatus> sse_decode_StreamSink_dkg_status_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<LogMessage> sse_decode_StreamSink_log_message_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<MempoolMsg> sse_decode_StreamSink_mempool_msg_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<SigningStatus> sse_decode_StreamSink_signing_status_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<SyncProgress> sse_decode_StreamSink_sync_progress_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Account sse_decode_account(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_coin = sse_decode_u_8(deserializer);
    var var_id = sse_decode_u_32(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_seed = sse_decode_opt_String(deserializer);
    var var_aindex = sse_decode_u_32(deserializer);
    var var_icon = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_birth = sse_decode_u_32(deserializer);
    var var_position = sse_decode_u_8(deserializer);
    var var_hidden = sse_decode_bool(deserializer);
    var var_saved = sse_decode_bool(deserializer);
    var var_enabled = sse_decode_bool(deserializer);
    var var_internal = sse_decode_bool(deserializer);
    var var_height = sse_decode_u_32(deserializer);
    var var_balance = sse_decode_u_64(deserializer);
    return Account(
        coin: var_coin,
        id: var_id,
        name: var_name,
        seed: var_seed,
        aindex: var_aindex,
        icon: var_icon,
        birth: var_birth,
        position: var_position,
        hidden: var_hidden,
        saved: var_saved,
        enabled: var_enabled,
        internal: var_internal,
        height: var_height,
        balance: var_balance);
  }

  @protected
  AccountUpdate sse_decode_account_update(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_coin = sse_decode_u_8(deserializer);
    var var_id = sse_decode_u_32(deserializer);
    var var_name = sse_decode_opt_String(deserializer);
    var var_icon = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_birth = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_folder = sse_decode_String(deserializer);
    var var_hidden = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_enabled = sse_decode_opt_box_autoadd_bool(deserializer);
    return AccountUpdate(
        coin: var_coin,
        id: var_id,
        name: var_name,
        icon: var_icon,
        birth: var_birth,
        folder: var_folder,
        hidden: var_hidden,
        enabled: var_enabled);
  }

  @protected
  Addresses sse_decode_addresses(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_taddr = sse_decode_opt_String(deserializer);
    var var_saddr = sse_decode_opt_String(deserializer);
    var var_oaddr = sse_decode_opt_String(deserializer);
    var var_ua = sse_decode_opt_String(deserializer);
    return Addresses(
        taddr: var_taddr, saddr: var_saddr, oaddr: var_oaddr, ua: var_ua);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  AccountUpdate sse_decode_box_autoadd_account_update(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_account_update(deserializer));
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  FrostParams sse_decode_box_autoadd_frost_params(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_frost_params(deserializer));
  }

  @protected
  NewAccount sse_decode_box_autoadd_new_account(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_new_account(deserializer));
  }

  @protected
  PaymentOptions sse_decode_box_autoadd_payment_options(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_payment_options(deserializer));
  }

  @protected
  PcztPackage sse_decode_box_autoadd_pczt_package(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_pczt_package(deserializer));
  }

  @protected
  Seed sse_decode_box_autoadd_seed(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_seed(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8(deserializer));
  }

  @protected
  DKGStatus sse_decode_dkg_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return DKGStatus_WaitParams();
      case 1:
        var var_field0 = sse_decode_list_String(deserializer);
        return DKGStatus_WaitAddresses(var_field0);
      case 2:
        return DKGStatus_PublishRound1Pkg();
      case 3:
        return DKGStatus_WaitRound1Pkg();
      case 4:
        return DKGStatus_PublishRound2Pkg();
      case 5:
        return DKGStatus_WaitRound2Pkg();
      case 6:
        return DKGStatus_Finalize();
      case 7:
        var var_field0 = sse_decode_String(deserializer);
        return DKGStatus_SharedAddress(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DustChangePolicy sse_decode_dust_change_policy(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return DustChangePolicy.values[inner];
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  Folder sse_decode_folder(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_name = sse_decode_String(deserializer);
    return Folder(id: var_id, name: var_name);
  }

  @protected
  FrostParams sse_decode_frost_params(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_8(deserializer);
    var var_n = sse_decode_u_8(deserializer);
    var var_t = sse_decode_u_8(deserializer);
    return FrostParams(id: var_id, n: var_n, t: var_t);
  }

  @protected
  FrostSignParams sse_decode_frost_sign_params(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_coordinator = sse_decode_u_16(deserializer);
    var var_fundingAccount = sse_decode_u_32(deserializer);
    return FrostSignParams(
        coordinator: var_coordinator, fundingAccount: var_fundingAccount);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<Account> sse_decode_list_account(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Account>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_account(deserializer));
    }
    return ans_;
  }

  @protected
  List<Memo> sse_decode_list_memo(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Memo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_memo(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_32_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  @protected
  Uint32List sse_decode_list_prim_u_32_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  @protected
  Uint64List sse_decode_list_prim_u_64_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint64List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint64List sse_decode_list_prim_usize_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint64List(len_);
  }

  @protected
  List<Recipient> sse_decode_list_recipient(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Recipient>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_recipient(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, String, PlatformInt64)> sse_decode_list_record_u_32_string_i_64(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, String, PlatformInt64)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_u_32_string_i_64(deserializer));
    }
    return ans_;
  }

  @protected
  List<TAddressTxCount> sse_decode_list_t_address_tx_count(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TAddressTxCount>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_t_address_tx_count(deserializer));
    }
    return ans_;
  }

  @protected
  List<Tx> sse_decode_list_tx(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Tx>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tx(deserializer));
    }
    return ans_;
  }

  @protected
  List<TxMemo> sse_decode_list_tx_memo(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TxMemo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tx_memo(deserializer));
    }
    return ans_;
  }

  @protected
  List<TxNote> sse_decode_list_tx_note(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TxNote>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tx_note(deserializer));
    }
    return ans_;
  }

  @protected
  List<TxOutput> sse_decode_list_tx_output(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TxOutput>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tx_output(deserializer));
    }
    return ans_;
  }

  @protected
  List<TxPlanIn> sse_decode_list_tx_plan_in(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TxPlanIn>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tx_plan_in(deserializer));
    }
    return ans_;
  }

  @protected
  List<TxPlanOut> sse_decode_list_tx_plan_out(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TxPlanOut>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tx_plan_out(deserializer));
    }
    return ans_;
  }

  @protected
  List<TxSpend> sse_decode_list_tx_spend(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TxSpend>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tx_spend(deserializer));
    }
    return ans_;
  }

  @protected
  LogMessage sse_decode_log_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_level = sse_decode_u_8(deserializer);
    var var_message = sse_decode_String(deserializer);
    var var_span = sse_decode_opt_String(deserializer);
    return LogMessage(level: var_level, message: var_message, span: var_span);
  }

  @protected
  Memo sse_decode_memo(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_idTx = sse_decode_u_32(deserializer);
    var var_idNote = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_pool = sse_decode_u_8(deserializer);
    var var_height = sse_decode_u_32(deserializer);
    var var_vout = sse_decode_u_32(deserializer);
    var var_time = sse_decode_u_32(deserializer);
    var var_memoBytes = sse_decode_list_prim_u_8_strict(deserializer);
    var var_memo = sse_decode_opt_String(deserializer);
    return Memo(
        id: var_id,
        idTx: var_idTx,
        idNote: var_idNote,
        pool: var_pool,
        height: var_height,
        vout: var_vout,
        time: var_time,
        memoBytes: var_memoBytes,
        memo: var_memo);
  }

  @protected
  MempoolMsg sse_decode_mempool_msg(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        var var_field1 = sse_decode_list_record_u_32_string_i_64(deserializer);
        var var_field2 = sse_decode_u_32(deserializer);
        return MempoolMsg_TxId(var_field0, var_field1, var_field2);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  NewAccount sse_decode_new_account(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_icon = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_restore = sse_decode_bool(deserializer);
    var var_key = sse_decode_String(deserializer);
    var var_passphrase = sse_decode_opt_String(deserializer);
    var var_fingerprint = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_aindex = sse_decode_u_32(deserializer);
    var var_birth = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_folder = sse_decode_String(deserializer);
    var var_pools = sse_decode_opt_box_autoadd_u_8(deserializer);
    var var_useInternal = sse_decode_bool(deserializer);
    var var_internal = sse_decode_bool(deserializer);
    return NewAccount(
        icon: var_icon,
        name: var_name,
        restore: var_restore,
        key: var_key,
        passphrase: var_passphrase,
        fingerprint: var_fingerprint,
        aindex: var_aindex,
        birth: var_birth,
        folder: var_folder,
        pools: var_pools,
        useInternal: var_useInternal,
        internal: var_internal);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  FrostParams? sse_decode_opt_box_autoadd_frost_params(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_frost_params(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Seed? sse_decode_opt_box_autoadd_seed(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_seed(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<Recipient>? sse_decode_opt_list_recipient(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_recipient(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PaymentOptions sse_decode_payment_options(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_srcPools = sse_decode_u_8(deserializer);
    var var_recipientPaysFee = sse_decode_bool(deserializer);
    var var_smartTransparent = sse_decode_bool(deserializer);
    var var_dustChangePolicy = sse_decode_dust_change_policy(deserializer);
    return PaymentOptions(
        srcPools: var_srcPools,
        recipientPaysFee: var_recipientPaysFee,
        smartTransparent: var_smartTransparent,
        dustChangePolicy: var_dustChangePolicy);
  }

  @protected
  PcztPackage sse_decode_pczt_package(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_pczt = sse_decode_list_prim_u_8_strict(deserializer);
    var var_nSpends = sse_decode_usize_array_3(deserializer);
    var var_saplingIndices = sse_decode_list_prim_usize_strict(deserializer);
    var var_orchardIndices = sse_decode_list_prim_usize_strict(deserializer);
    var var_canSign = sse_decode_bool(deserializer);
    var var_canBroadcast = sse_decode_bool(deserializer);
    return PcztPackage(
        pczt: var_pczt,
        nSpends: var_nSpends,
        saplingIndices: var_saplingIndices,
        orchardIndices: var_orchardIndices,
        canSign: var_canSign,
        canBroadcast: var_canBroadcast);
  }

  @protected
  PoolBalance sse_decode_pool_balance(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_list_prim_u_64_strict(deserializer);
    return PoolBalance(field0: var_field0);
  }

  @protected
  Receivers sse_decode_receivers(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_taddr = sse_decode_opt_String(deserializer);
    var var_saddr = sse_decode_opt_String(deserializer);
    var var_oaddr = sse_decode_opt_String(deserializer);
    return Receivers(taddr: var_taddr, saddr: var_saddr, oaddr: var_oaddr);
  }

  @protected
  Recipient sse_decode_recipient(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_address = sse_decode_String(deserializer);
    var var_amount = sse_decode_u_64(deserializer);
    var var_pools = sse_decode_opt_box_autoadd_u_8(deserializer);
    var var_userMemo = sse_decode_opt_String(deserializer);
    var var_memoBytes = sse_decode_opt_list_prim_u_8_strict(deserializer);
    return Recipient(
        address: var_address,
        amount: var_amount,
        pools: var_pools,
        userMemo: var_userMemo,
        memoBytes: var_memoBytes);
  }

  @protected
  (int, String, PlatformInt64) sse_decode_record_u_32_string_i_64(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_32(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    var var_field2 = sse_decode_i_64(deserializer);
    return (var_field0, var_field1, var_field2);
  }

  @protected
  Seed sse_decode_seed(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_mnemonic = sse_decode_String(deserializer);
    var var_phrase = sse_decode_String(deserializer);
    var var_aindex = sse_decode_u_32(deserializer);
    return Seed(mnemonic: var_mnemonic, phrase: var_phrase, aindex: var_aindex);
  }

  @protected
  ServerType sse_decode_server_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ServerType.values[inner];
  }

  @protected
  SigningStatus sse_decode_signing_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return SigningStatus_SendingCommitment();
      case 1:
        return SigningStatus_WaitingForCommitments();
      case 2:
        return SigningStatus_SendingSigningPackage();
      case 3:
        return SigningStatus_WaitingForSigningPackage();
      case 4:
        return SigningStatus_SendingSignatureShare();
      case 5:
        return SigningStatus_SigningCompleted();
      case 6:
        return SigningStatus_WaitingForSignatureShares();
      case 7:
        return SigningStatus_PreparingTransaction();
      case 8:
        return SigningStatus_SendingTransaction();
      case 9:
        var var_field0 = sse_decode_String(deserializer);
        return SigningStatus_TransactionSent(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SyncProgress sse_decode_sync_progress(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_height = sse_decode_u_32(deserializer);
    var var_time = sse_decode_u_32(deserializer);
    return SyncProgress(height: var_height, time: var_time);
  }

  @protected
  TAddressTxCount sse_decode_t_address_tx_count(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_address = sse_decode_String(deserializer);
    var var_scope = sse_decode_u_8(deserializer);
    var var_dindex = sse_decode_u_32(deserializer);
    var var_amount = sse_decode_u_64(deserializer);
    var var_txCount = sse_decode_u_32(deserializer);
    var var_time = sse_decode_u_32(deserializer);
    return TAddressTxCount(
        address: var_address,
        scope: var_scope,
        dindex: var_dindex,
        amount: var_amount,
        txCount: var_txCount,
        time: var_time);
  }

  @protected
  Tx sse_decode_tx(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_txid = sse_decode_list_prim_u_8_strict(deserializer);
    var var_height = sse_decode_u_32(deserializer);
    var var_time = sse_decode_u_32(deserializer);
    var var_value = sse_decode_i_64(deserializer);
    var var_tpe = sse_decode_opt_box_autoadd_u_8(deserializer);
    return Tx(
        id: var_id,
        txid: var_txid,
        height: var_height,
        time: var_time,
        value: var_value,
        tpe: var_tpe);
  }

  @protected
  TxAccount sse_decode_tx_account(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_account = sse_decode_u_32(deserializer);
    var var_txid = sse_decode_list_prim_u_8_strict(deserializer);
    var var_height = sse_decode_u_32(deserializer);
    var var_time = sse_decode_u_32(deserializer);
    var var_notes = sse_decode_list_tx_note(deserializer);
    var var_spends = sse_decode_list_tx_spend(deserializer);
    var var_outputs = sse_decode_list_tx_output(deserializer);
    var var_memos = sse_decode_list_tx_memo(deserializer);
    return TxAccount(
        id: var_id,
        account: var_account,
        txid: var_txid,
        height: var_height,
        time: var_time,
        notes: var_notes,
        spends: var_spends,
        outputs: var_outputs,
        memos: var_memos);
  }

  @protected
  TxMemo sse_decode_tx_memo(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_note = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_output = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_pool = sse_decode_u_8(deserializer);
    var var_memo = sse_decode_opt_String(deserializer);
    return TxMemo(
        note: var_note, output: var_output, pool: var_pool, memo: var_memo);
  }

  @protected
  TxNote sse_decode_tx_note(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_pool = sse_decode_u_8(deserializer);
    var var_height = sse_decode_u_32(deserializer);
    var var_value = sse_decode_u_64(deserializer);
    var var_locked = sse_decode_bool(deserializer);
    return TxNote(
        id: var_id,
        pool: var_pool,
        height: var_height,
        value: var_value,
        locked: var_locked);
  }

  @protected
  TxOutput sse_decode_tx_output(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_pool = sse_decode_u_8(deserializer);
    var var_height = sse_decode_u_32(deserializer);
    var var_value = sse_decode_u_64(deserializer);
    var var_address = sse_decode_String(deserializer);
    return TxOutput(
        id: var_id,
        pool: var_pool,
        height: var_height,
        value: var_value,
        address: var_address);
  }

  @protected
  TxPlan sse_decode_tx_plan(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_height = sse_decode_u_32(deserializer);
    var var_inputs = sse_decode_list_tx_plan_in(deserializer);
    var var_outputs = sse_decode_list_tx_plan_out(deserializer);
    var var_fee = sse_decode_u_64(deserializer);
    var var_canSign = sse_decode_bool(deserializer);
    var var_canBroadcast = sse_decode_bool(deserializer);
    return TxPlan(
        height: var_height,
        inputs: var_inputs,
        outputs: var_outputs,
        fee: var_fee,
        canSign: var_canSign,
        canBroadcast: var_canBroadcast);
  }

  @protected
  TxPlanIn sse_decode_tx_plan_in(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_pool = sse_decode_u_8(deserializer);
    var var_amount = sse_decode_opt_box_autoadd_u_64(deserializer);
    return TxPlanIn(pool: var_pool, amount: var_amount);
  }

  @protected
  TxPlanOut sse_decode_tx_plan_out(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_pool = sse_decode_u_8(deserializer);
    var var_amount = sse_decode_u_64(deserializer);
    var var_address = sse_decode_String(deserializer);
    return TxPlanOut(pool: var_pool, amount: var_amount, address: var_address);
  }

  @protected
  TxSpend sse_decode_tx_spend(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_pool = sse_decode_u_8(deserializer);
    var var_height = sse_decode_u_32(deserializer);
    var var_value = sse_decode_u_64(deserializer);
    return TxSpend(
        id: var_id, pool: var_pool, height: var_height, value: var_value);
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  UsizeArray3 sse_decode_usize_array_3(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_usize_strict(deserializer);
    return UsizeArray3(inner);
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMempool(
          Mempool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MempoolImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMempool(
          Mempool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MempoolImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMempool(
          Mempool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MempoolImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_StreamSink_dkg_status_Sse(
      RustStreamSink<DKGStatus> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_dkg_status,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_log_message_Sse(
      RustStreamSink<LogMessage> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_log_message,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_mempool_msg_Sse(
      RustStreamSink<MempoolMsg> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_mempool_msg,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_signing_status_Sse(
      RustStreamSink<SigningStatus> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_signing_status,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_sync_progress_Sse(
      RustStreamSink<SyncProgress> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_sync_progress,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_account(Account self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.coin, serializer);
    sse_encode_u_32(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.seed, serializer);
    sse_encode_u_32(self.aindex, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.icon, serializer);
    sse_encode_u_32(self.birth, serializer);
    sse_encode_u_8(self.position, serializer);
    sse_encode_bool(self.hidden, serializer);
    sse_encode_bool(self.saved, serializer);
    sse_encode_bool(self.enabled, serializer);
    sse_encode_bool(self.internal, serializer);
    sse_encode_u_32(self.height, serializer);
    sse_encode_u_64(self.balance, serializer);
  }

  @protected
  void sse_encode_account_update(AccountUpdate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.coin, serializer);
    sse_encode_u_32(self.id, serializer);
    sse_encode_opt_String(self.name, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.icon, serializer);
    sse_encode_opt_box_autoadd_u_32(self.birth, serializer);
    sse_encode_String(self.folder, serializer);
    sse_encode_opt_box_autoadd_bool(self.hidden, serializer);
    sse_encode_opt_box_autoadd_bool(self.enabled, serializer);
  }

  @protected
  void sse_encode_addresses(Addresses self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.taddr, serializer);
    sse_encode_opt_String(self.saddr, serializer);
    sse_encode_opt_String(self.oaddr, serializer);
    sse_encode_opt_String(self.ua, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_account_update(
      AccountUpdate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_account_update(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_frost_params(
      FrostParams self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_frost_params(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_new_account(
      NewAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_new_account(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_payment_options(
      PaymentOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_payment_options(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_pczt_package(
      PcztPackage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_pczt_package(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_seed(Seed self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_seed(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self, serializer);
  }

  @protected
  void sse_encode_dkg_status(DKGStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DKGStatus_WaitParams():
        sse_encode_i_32(0, serializer);
      case DKGStatus_WaitAddresses(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_list_String(field0, serializer);
      case DKGStatus_PublishRound1Pkg():
        sse_encode_i_32(2, serializer);
      case DKGStatus_WaitRound1Pkg():
        sse_encode_i_32(3, serializer);
      case DKGStatus_PublishRound2Pkg():
        sse_encode_i_32(4, serializer);
      case DKGStatus_WaitRound2Pkg():
        sse_encode_i_32(5, serializer);
      case DKGStatus_Finalize():
        sse_encode_i_32(6, serializer);
      case DKGStatus_SharedAddress(field0: final field0):
        sse_encode_i_32(7, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_dust_change_policy(
      DustChangePolicy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_folder(Folder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_String(self.name, serializer);
  }

  @protected
  void sse_encode_frost_params(FrostParams self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.id, serializer);
    sse_encode_u_8(self.n, serializer);
    sse_encode_u_8(self.t, serializer);
  }

  @protected
  void sse_encode_frost_sign_params(
      FrostSignParams self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_16(self.coordinator, serializer);
    sse_encode_u_32(self.fundingAccount, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_account(List<Account> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_account(item, serializer);
    }
  }

  @protected
  void sse_encode_list_memo(List<Memo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_memo(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_32_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint32List(self is Uint32List ? self : Uint32List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_32_strict(
      Uint32List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint32List(self);
  }

  @protected
  void sse_encode_list_prim_u_64_strict(
      Uint64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint64List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_prim_usize_strict(
      Uint64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint64List(self);
  }

  @protected
  void sse_encode_list_recipient(
      List<Recipient> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_recipient(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_u_32_string_i_64(
      List<(int, String, PlatformInt64)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_u_32_string_i_64(item, serializer);
    }
  }

  @protected
  void sse_encode_list_t_address_tx_count(
      List<TAddressTxCount> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_t_address_tx_count(item, serializer);
    }
  }

  @protected
  void sse_encode_list_tx(List<Tx> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tx(item, serializer);
    }
  }

  @protected
  void sse_encode_list_tx_memo(List<TxMemo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tx_memo(item, serializer);
    }
  }

  @protected
  void sse_encode_list_tx_note(List<TxNote> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tx_note(item, serializer);
    }
  }

  @protected
  void sse_encode_list_tx_output(
      List<TxOutput> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tx_output(item, serializer);
    }
  }

  @protected
  void sse_encode_list_tx_plan_in(
      List<TxPlanIn> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tx_plan_in(item, serializer);
    }
  }

  @protected
  void sse_encode_list_tx_plan_out(
      List<TxPlanOut> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tx_plan_out(item, serializer);
    }
  }

  @protected
  void sse_encode_list_tx_spend(List<TxSpend> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tx_spend(item, serializer);
    }
  }

  @protected
  void sse_encode_log_message(LogMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.level, serializer);
    sse_encode_String(self.message, serializer);
    sse_encode_opt_String(self.span, serializer);
  }

  @protected
  void sse_encode_memo(Memo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_u_32(self.idTx, serializer);
    sse_encode_opt_box_autoadd_u_32(self.idNote, serializer);
    sse_encode_u_8(self.pool, serializer);
    sse_encode_u_32(self.height, serializer);
    sse_encode_u_32(self.vout, serializer);
    sse_encode_u_32(self.time, serializer);
    sse_encode_list_prim_u_8_strict(self.memoBytes, serializer);
    sse_encode_opt_String(self.memo, serializer);
  }

  @protected
  void sse_encode_mempool_msg(MempoolMsg self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case MempoolMsg_TxId(
          field0: final field0,
          field1: final field1,
          field2: final field2
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
        sse_encode_list_record_u_32_string_i_64(field1, serializer);
        sse_encode_u_32(field2, serializer);
    }
  }

  @protected
  void sse_encode_new_account(NewAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_list_prim_u_8_strict(self.icon, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_bool(self.restore, serializer);
    sse_encode_String(self.key, serializer);
    sse_encode_opt_String(self.passphrase, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.fingerprint, serializer);
    sse_encode_u_32(self.aindex, serializer);
    sse_encode_opt_box_autoadd_u_32(self.birth, serializer);
    sse_encode_String(self.folder, serializer);
    sse_encode_opt_box_autoadd_u_8(self.pools, serializer);
    sse_encode_bool(self.useInternal, serializer);
    sse_encode_bool(self.internal, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_frost_params(
      FrostParams? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_frost_params(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_seed(Seed? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_seed(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_recipient(
      List<Recipient>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_recipient(self, serializer);
    }
  }

  @protected
  void sse_encode_payment_options(
      PaymentOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.srcPools, serializer);
    sse_encode_bool(self.recipientPaysFee, serializer);
    sse_encode_bool(self.smartTransparent, serializer);
    sse_encode_dust_change_policy(self.dustChangePolicy, serializer);
  }

  @protected
  void sse_encode_pczt_package(PcztPackage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.pczt, serializer);
    sse_encode_usize_array_3(self.nSpends, serializer);
    sse_encode_list_prim_usize_strict(self.saplingIndices, serializer);
    sse_encode_list_prim_usize_strict(self.orchardIndices, serializer);
    sse_encode_bool(self.canSign, serializer);
    sse_encode_bool(self.canBroadcast, serializer);
  }

  @protected
  void sse_encode_pool_balance(PoolBalance self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_64_strict(self.field0, serializer);
  }

  @protected
  void sse_encode_receivers(Receivers self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.taddr, serializer);
    sse_encode_opt_String(self.saddr, serializer);
    sse_encode_opt_String(self.oaddr, serializer);
  }

  @protected
  void sse_encode_recipient(Recipient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.address, serializer);
    sse_encode_u_64(self.amount, serializer);
    sse_encode_opt_box_autoadd_u_8(self.pools, serializer);
    sse_encode_opt_String(self.userMemo, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.memoBytes, serializer);
  }

  @protected
  void sse_encode_record_u_32_string_i_64(
      (int, String, PlatformInt64) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
    sse_encode_i_64(self.$3, serializer);
  }

  @protected
  void sse_encode_seed(Seed self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.mnemonic, serializer);
    sse_encode_String(self.phrase, serializer);
    sse_encode_u_32(self.aindex, serializer);
  }

  @protected
  void sse_encode_server_type(ServerType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_signing_status(SigningStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SigningStatus_SendingCommitment():
        sse_encode_i_32(0, serializer);
      case SigningStatus_WaitingForCommitments():
        sse_encode_i_32(1, serializer);
      case SigningStatus_SendingSigningPackage():
        sse_encode_i_32(2, serializer);
      case SigningStatus_WaitingForSigningPackage():
        sse_encode_i_32(3, serializer);
      case SigningStatus_SendingSignatureShare():
        sse_encode_i_32(4, serializer);
      case SigningStatus_SigningCompleted():
        sse_encode_i_32(5, serializer);
      case SigningStatus_WaitingForSignatureShares():
        sse_encode_i_32(6, serializer);
      case SigningStatus_PreparingTransaction():
        sse_encode_i_32(7, serializer);
      case SigningStatus_SendingTransaction():
        sse_encode_i_32(8, serializer);
      case SigningStatus_TransactionSent(field0: final field0):
        sse_encode_i_32(9, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_sync_progress(SyncProgress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.height, serializer);
    sse_encode_u_32(self.time, serializer);
  }

  @protected
  void sse_encode_t_address_tx_count(
      TAddressTxCount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.address, serializer);
    sse_encode_u_8(self.scope, serializer);
    sse_encode_u_32(self.dindex, serializer);
    sse_encode_u_64(self.amount, serializer);
    sse_encode_u_32(self.txCount, serializer);
    sse_encode_u_32(self.time, serializer);
  }

  @protected
  void sse_encode_tx(Tx self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_list_prim_u_8_strict(self.txid, serializer);
    sse_encode_u_32(self.height, serializer);
    sse_encode_u_32(self.time, serializer);
    sse_encode_i_64(self.value, serializer);
    sse_encode_opt_box_autoadd_u_8(self.tpe, serializer);
  }

  @protected
  void sse_encode_tx_account(TxAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_u_32(self.account, serializer);
    sse_encode_list_prim_u_8_strict(self.txid, serializer);
    sse_encode_u_32(self.height, serializer);
    sse_encode_u_32(self.time, serializer);
    sse_encode_list_tx_note(self.notes, serializer);
    sse_encode_list_tx_spend(self.spends, serializer);
    sse_encode_list_tx_output(self.outputs, serializer);
    sse_encode_list_tx_memo(self.memos, serializer);
  }

  @protected
  void sse_encode_tx_memo(TxMemo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_u_32(self.note, serializer);
    sse_encode_opt_box_autoadd_u_32(self.output, serializer);
    sse_encode_u_8(self.pool, serializer);
    sse_encode_opt_String(self.memo, serializer);
  }

  @protected
  void sse_encode_tx_note(TxNote self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_u_8(self.pool, serializer);
    sse_encode_u_32(self.height, serializer);
    sse_encode_u_64(self.value, serializer);
    sse_encode_bool(self.locked, serializer);
  }

  @protected
  void sse_encode_tx_output(TxOutput self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_u_8(self.pool, serializer);
    sse_encode_u_32(self.height, serializer);
    sse_encode_u_64(self.value, serializer);
    sse_encode_String(self.address, serializer);
  }

  @protected
  void sse_encode_tx_plan(TxPlan self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.height, serializer);
    sse_encode_list_tx_plan_in(self.inputs, serializer);
    sse_encode_list_tx_plan_out(self.outputs, serializer);
    sse_encode_u_64(self.fee, serializer);
    sse_encode_bool(self.canSign, serializer);
    sse_encode_bool(self.canBroadcast, serializer);
  }

  @protected
  void sse_encode_tx_plan_in(TxPlanIn self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.pool, serializer);
    sse_encode_opt_box_autoadd_u_64(self.amount, serializer);
  }

  @protected
  void sse_encode_tx_plan_out(TxPlanOut self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.pool, serializer);
    sse_encode_u_64(self.amount, serializer);
    sse_encode_String(self.address, serializer);
  }

  @protected
  void sse_encode_tx_spend(TxSpend self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_u_8(self.pool, serializer);
    sse_encode_u_32(self.height, serializer);
    sse_encode_u_64(self.value, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_usize_array_3(UsizeArray3 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_usize_strict(self.inner, serializer);
  }
}

@sealed
class MempoolImpl extends RustOpaque implements Mempool {
  // Not to be used by end users
  MempoolImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MempoolImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Mempool,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Mempool,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MempoolPtr,
  );

  Future<void> cancel() => RustLib.instance.api.crateApiMempoolMempoolCancel(
        that: this,
      );

  Stream<MempoolMsg> run({required int height}) => RustLib.instance.api
      .crateApiMempoolMempoolRun(that: this, height: height);
}
