// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/account.dart';
import 'api/db.dart';
import 'api/key.dart';
import 'api/network.dart';
import 'api/pay.dart';
import 'api/sync.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'pay.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiAccountInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => 1544446110;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_zkool',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<PoolBalance> crateApiSyncBalance();

  Future<void> crateApiDbCreateDatabase(
      {required int coin, required String dbFilepath});

  Future<void> crateApiAccountDeleteAccount({required Account account});

  Future<void> crateApiAccountDropSchema();

  Future<String> crateApiAccountGetAccountUfvk();

  Future<List<Account>> crateApiAccountGetAllAccounts();

  Future<int> crateApiNetworkGetCurrentHeight();

  Future<int> crateApiSyncGetDbHeight({required int account});

  Future<void> crateApiAccountInitApp();

  bool crateApiKeyIsValidAddress({required String address});

  bool crateApiKeyIsValidKey({required String key});

  Future<List<Account>> crateApiAccountListAccounts();

  Future<void> crateApiAccountMoveAccount(
      {required int oldPosition, required int newPosition});

  Future<void> crateApiAccountNewAccount({required NewAccount na});

  String crateApiAccountNewSeed({required String phrase});

  Future<void> crateApiDbOpenDatabase({required String dbFilepath});

  Future<TxPlan> crateApiPayPrepare(
      {required int srcPools,
      required List<Recipient> recipients,
      required bool recipientPaysFee});

  Future<Receivers> crateApiAccountReceiversDefault();

  Receivers crateApiAccountReceiversFromUa({required String ua});

  Future<void> crateApiAccountRemoveAccount({required int accountId});

  Future<void> crateApiAccountReorderAccount(
      {required int oldPosition, required int newPosition});

  Future<void> crateApiSyncRewindSync({required int height});

  Future<String> crateApiPaySend(
      {required int height, required List<int> data});

  Future<void> crateApiAccountSetAccount({required int id});

  void crateApiNetworkSetLwd({required String lwd});

  Stream<SyncProgress> crateApiSyncSynchronize(
      {required List<int> accounts, required int currentHeight});

  String crateApiAccountUaFromUfvk({required String ufvk, int? di});

  Future<void> crateApiAccountUpdateAccount({required AccountUpdate update});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<PoolBalance> crateApiSyncBalance() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_pool_balance,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSyncBalanceConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSyncBalanceConstMeta => const TaskConstMeta(
        debugName: "balance",
        argNames: [],
      );

  @override
  Future<void> crateApiDbCreateDatabase(
      {required int coin, required String dbFilepath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(coin, serializer);
        sse_encode_String(dbFilepath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDbCreateDatabaseConstMeta,
      argValues: [coin, dbFilepath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDbCreateDatabaseConstMeta => const TaskConstMeta(
        debugName: "create_database",
        argNames: ["coin", "dbFilepath"],
      );

  @override
  Future<void> crateApiAccountDeleteAccount({required Account account}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_account(account, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountDeleteAccountConstMeta,
      argValues: [account],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountDeleteAccountConstMeta =>
      const TaskConstMeta(
        debugName: "delete_account",
        argNames: ["account"],
      );

  @override
  Future<void> crateApiAccountDropSchema() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountDropSchemaConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountDropSchemaConstMeta => const TaskConstMeta(
        debugName: "drop_schema",
        argNames: [],
      );

  @override
  Future<String> crateApiAccountGetAccountUfvk() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountGetAccountUfvkConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountGetAccountUfvkConstMeta =>
      const TaskConstMeta(
        debugName: "get_account_ufvk",
        argNames: [],
      );

  @override
  Future<List<Account>> crateApiAccountGetAllAccounts() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_account,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountGetAllAccountsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountGetAllAccountsConstMeta =>
      const TaskConstMeta(
        debugName: "get_all_accounts",
        argNames: [],
      );

  @override
  Future<int> crateApiNetworkGetCurrentHeight() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiNetworkGetCurrentHeightConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNetworkGetCurrentHeightConstMeta =>
      const TaskConstMeta(
        debugName: "get_current_height",
        argNames: [],
      );

  @override
  Future<int> crateApiSyncGetDbHeight({required int account}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(account, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSyncGetDbHeightConstMeta,
      argValues: [account],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSyncGetDbHeightConstMeta => const TaskConstMeta(
        debugName: "get_db_height",
        argNames: ["account"],
      );

  @override
  Future<void> crateApiAccountInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAccountInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  bool crateApiKeyIsValidAddress({required String address}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(address, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiKeyIsValidAddressConstMeta,
      argValues: [address],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiKeyIsValidAddressConstMeta => const TaskConstMeta(
        debugName: "is_valid_address",
        argNames: ["address"],
      );

  @override
  bool crateApiKeyIsValidKey({required String key}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(key, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiKeyIsValidKeyConstMeta,
      argValues: [key],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiKeyIsValidKeyConstMeta => const TaskConstMeta(
        debugName: "is_valid_key",
        argNames: ["key"],
      );

  @override
  Future<List<Account>> crateApiAccountListAccounts() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_account,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountListAccountsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountListAccountsConstMeta =>
      const TaskConstMeta(
        debugName: "list_accounts",
        argNames: [],
      );

  @override
  Future<void> crateApiAccountMoveAccount(
      {required int oldPosition, required int newPosition}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(oldPosition, serializer);
        sse_encode_u_32(newPosition, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountMoveAccountConstMeta,
      argValues: [oldPosition, newPosition],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountMoveAccountConstMeta => const TaskConstMeta(
        debugName: "move_account",
        argNames: ["oldPosition", "newPosition"],
      );

  @override
  Future<void> crateApiAccountNewAccount({required NewAccount na}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_new_account(na, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountNewAccountConstMeta,
      argValues: [na],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountNewAccountConstMeta => const TaskConstMeta(
        debugName: "new_account",
        argNames: ["na"],
      );

  @override
  String crateApiAccountNewSeed({required String phrase}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(phrase, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountNewSeedConstMeta,
      argValues: [phrase],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountNewSeedConstMeta => const TaskConstMeta(
        debugName: "new_seed",
        argNames: ["phrase"],
      );

  @override
  Future<void> crateApiDbOpenDatabase({required String dbFilepath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dbFilepath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDbOpenDatabaseConstMeta,
      argValues: [dbFilepath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDbOpenDatabaseConstMeta => const TaskConstMeta(
        debugName: "open_database",
        argNames: ["dbFilepath"],
      );

  @override
  Future<TxPlan> crateApiPayPrepare(
      {required int srcPools,
      required List<Recipient> recipients,
      required bool recipientPaysFee}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(srcPools, serializer);
        sse_encode_list_recipient(recipients, serializer);
        sse_encode_bool(recipientPaysFee, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_tx_plan,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPayPrepareConstMeta,
      argValues: [srcPools, recipients, recipientPaysFee],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPayPrepareConstMeta => const TaskConstMeta(
        debugName: "prepare",
        argNames: ["srcPools", "recipients", "recipientPaysFee"],
      );

  @override
  Future<Receivers> crateApiAccountReceiversDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_receivers,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAccountReceiversDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountReceiversDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "receivers_default",
        argNames: [],
      );

  @override
  Receivers crateApiAccountReceiversFromUa({required String ua}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(ua, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_receivers,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountReceiversFromUaConstMeta,
      argValues: [ua],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountReceiversFromUaConstMeta =>
      const TaskConstMeta(
        debugName: "receivers_from_ua",
        argNames: ["ua"],
      );

  @override
  Future<void> crateApiAccountRemoveAccount({required int accountId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(accountId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountRemoveAccountConstMeta,
      argValues: [accountId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountRemoveAccountConstMeta =>
      const TaskConstMeta(
        debugName: "remove_account",
        argNames: ["accountId"],
      );

  @override
  Future<void> crateApiAccountReorderAccount(
      {required int oldPosition, required int newPosition}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(oldPosition, serializer);
        sse_encode_u_32(newPosition, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountReorderAccountConstMeta,
      argValues: [oldPosition, newPosition],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountReorderAccountConstMeta =>
      const TaskConstMeta(
        debugName: "reorder_account",
        argNames: ["oldPosition", "newPosition"],
      );

  @override
  Future<void> crateApiSyncRewindSync({required int height}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(height, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSyncRewindSyncConstMeta,
      argValues: [height],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSyncRewindSyncConstMeta => const TaskConstMeta(
        debugName: "rewind_sync",
        argNames: ["height"],
      );

  @override
  Future<String> crateApiPaySend(
      {required int height, required List<int> data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(height, serializer);
        sse_encode_list_prim_u_8_loose(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPaySendConstMeta,
      argValues: [height, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPaySendConstMeta => const TaskConstMeta(
        debugName: "send",
        argNames: ["height", "data"],
      );

  @override
  Future<void> crateApiAccountSetAccount({required int id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountSetAccountConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountSetAccountConstMeta => const TaskConstMeta(
        debugName: "set_account",
        argNames: ["id"],
      );

  @override
  void crateApiNetworkSetLwd({required String lwd}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(lwd, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiNetworkSetLwdConstMeta,
      argValues: [lwd],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNetworkSetLwdConstMeta => const TaskConstMeta(
        debugName: "set_lwd",
        argNames: ["lwd"],
      );

  @override
  Stream<SyncProgress> crateApiSyncSynchronize(
      {required List<int> accounts, required int currentHeight}) {
    final progress = RustStreamSink<SyncProgress>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_sync_progress_Sse(progress, serializer);
        sse_encode_list_prim_u_32_loose(accounts, serializer);
        sse_encode_u_32(currentHeight, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSyncSynchronizeConstMeta,
      argValues: [progress, accounts, currentHeight],
      apiImpl: this,
    )));
    return progress.stream;
  }

  TaskConstMeta get kCrateApiSyncSynchronizeConstMeta => const TaskConstMeta(
        debugName: "synchronize",
        argNames: ["progress", "accounts", "currentHeight"],
      );

  @override
  String crateApiAccountUaFromUfvk({required String ufvk, int? di}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(ufvk, serializer);
        sse_encode_opt_box_autoadd_u_32(di, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountUaFromUfvkConstMeta,
      argValues: [ufvk, di],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountUaFromUfvkConstMeta => const TaskConstMeta(
        debugName: "ua_from_ufvk",
        argNames: ["ufvk", "di"],
      );

  @override
  Future<void> crateApiAccountUpdateAccount({required AccountUpdate update}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_account_update(update, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountUpdateAccountConstMeta,
      argValues: [update],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountUpdateAccountConstMeta =>
      const TaskConstMeta(
        debugName: "update_account",
        argNames: ["update"],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  RustStreamSink<SyncProgress> dco_decode_StreamSink_sync_progress_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Account dco_decode_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 12)
      throw Exception('unexpected arr length: expect 12 but see ${arr.length}');
    return Account(
      coin: dco_decode_u_8(arr[0]),
      id: dco_decode_u_32(arr[1]),
      name: dco_decode_String(arr[2]),
      seed: dco_decode_opt_String(arr[3]),
      aindex: dco_decode_u_32(arr[4]),
      icon: dco_decode_opt_list_prim_u_8_strict(arr[5]),
      birth: dco_decode_u_32(arr[6]),
      position: dco_decode_u_8(arr[7]),
      hidden: dco_decode_bool(arr[8]),
      saved: dco_decode_bool(arr[9]),
      enabled: dco_decode_bool(arr[10]),
      height: dco_decode_u_32(arr[11]),
    );
  }

  @protected
  AccountUpdate dco_decode_account_update(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return AccountUpdate(
      coin: dco_decode_u_8(arr[0]),
      id: dco_decode_u_32(arr[1]),
      name: dco_decode_opt_String(arr[2]),
      icon: dco_decode_opt_list_prim_u_8_strict(arr[3]),
      birth: dco_decode_opt_box_autoadd_u_32(arr[4]),
      hidden: dco_decode_opt_box_autoadd_bool(arr[5]),
      enabled: dco_decode_opt_box_autoadd_bool(arr[6]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Account dco_decode_box_autoadd_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_account(raw);
  }

  @protected
  AccountUpdate dco_decode_box_autoadd_account_update(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_account_update(raw);
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  NewAccount dco_decode_box_autoadd_new_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_new_account(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<Account> dco_decode_list_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_account).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_32_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint32List dco_decode_list_prim_u_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint32List;
  }

  @protected
  Uint64List dco_decode_list_prim_u_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeUint64List(raw);
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<Recipient> dco_decode_list_recipient(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_recipient).toList();
  }

  @protected
  List<TxPlanIn> dco_decode_list_tx_plan_in(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tx_plan_in).toList();
  }

  @protected
  List<TxPlanOut> dco_decode_list_tx_plan_out(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tx_plan_out).toList();
  }

  @protected
  NewAccount dco_decode_new_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return NewAccount(
      icon: dco_decode_opt_list_prim_u_8_strict(arr[0]),
      name: dco_decode_String(arr[1]),
      restore: dco_decode_bool(arr[2]),
      key: dco_decode_String(arr[3]),
      aindex: dco_decode_u_32(arr[4]),
      birth: dco_decode_opt_box_autoadd_u_32(arr[5]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_8(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  PoolBalance dco_decode_pool_balance(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PoolBalance(
      field0: dco_decode_list_prim_u_64_strict(arr[0]),
    );
  }

  @protected
  Receivers dco_decode_receivers(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Receivers(
      taddr: dco_decode_opt_String(arr[0]),
      saddr: dco_decode_opt_String(arr[1]),
      oaddr: dco_decode_opt_String(arr[2]),
    );
  }

  @protected
  Recipient dco_decode_recipient(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return Recipient(
      address: dco_decode_String(arr[0]),
      amount: dco_decode_u_64(arr[1]),
      pools: dco_decode_opt_box_autoadd_u_8(arr[2]),
      userMemo: dco_decode_opt_String(arr[3]),
      memoBytes: dco_decode_opt_list_prim_u_8_strict(arr[4]),
    );
  }

  @protected
  SyncProgress dco_decode_sync_progress(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SyncProgress(
      height: dco_decode_u_32(arr[0]),
      time: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  TxPlan dco_decode_tx_plan(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return TxPlan(
      height: dco_decode_u_32(arr[0]),
      inputs: dco_decode_list_tx_plan_in(arr[1]),
      outputs: dco_decode_list_tx_plan_out(arr[2]),
      fee: dco_decode_u_64(arr[3]),
      change: dco_decode_u_64(arr[4]),
      changePool: dco_decode_u_8(arr[5]),
      data: dco_decode_list_prim_u_8_strict(arr[6]),
    );
  }

  @protected
  TxPlanIn dco_decode_tx_plan_in(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TxPlanIn(
      pool: dco_decode_u_8(arr[0]),
      amount: dco_decode_u_64(arr[1]),
    );
  }

  @protected
  TxPlanOut dco_decode_tx_plan_out(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TxPlanOut(
      pool: dco_decode_u_8(arr[0]),
      amount: dco_decode_u_64(arr[1]),
      address: dco_decode_String(arr[2]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  RustStreamSink<SyncProgress> sse_decode_StreamSink_sync_progress_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Account sse_decode_account(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_coin = sse_decode_u_8(deserializer);
    var var_id = sse_decode_u_32(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_seed = sse_decode_opt_String(deserializer);
    var var_aindex = sse_decode_u_32(deserializer);
    var var_icon = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_birth = sse_decode_u_32(deserializer);
    var var_position = sse_decode_u_8(deserializer);
    var var_hidden = sse_decode_bool(deserializer);
    var var_saved = sse_decode_bool(deserializer);
    var var_enabled = sse_decode_bool(deserializer);
    var var_height = sse_decode_u_32(deserializer);
    return Account(
        coin: var_coin,
        id: var_id,
        name: var_name,
        seed: var_seed,
        aindex: var_aindex,
        icon: var_icon,
        birth: var_birth,
        position: var_position,
        hidden: var_hidden,
        saved: var_saved,
        enabled: var_enabled,
        height: var_height);
  }

  @protected
  AccountUpdate sse_decode_account_update(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_coin = sse_decode_u_8(deserializer);
    var var_id = sse_decode_u_32(deserializer);
    var var_name = sse_decode_opt_String(deserializer);
    var var_icon = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_birth = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_hidden = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_enabled = sse_decode_opt_box_autoadd_bool(deserializer);
    return AccountUpdate(
        coin: var_coin,
        id: var_id,
        name: var_name,
        icon: var_icon,
        birth: var_birth,
        hidden: var_hidden,
        enabled: var_enabled);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Account sse_decode_box_autoadd_account(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_account(deserializer));
  }

  @protected
  AccountUpdate sse_decode_box_autoadd_account_update(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_account_update(deserializer));
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  NewAccount sse_decode_box_autoadd_new_account(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_new_account(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8(deserializer));
  }

  @protected
  List<Account> sse_decode_list_account(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Account>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_account(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_32_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  @protected
  Uint32List sse_decode_list_prim_u_32_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  @protected
  Uint64List sse_decode_list_prim_u_64_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint64List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<Recipient> sse_decode_list_recipient(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Recipient>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_recipient(deserializer));
    }
    return ans_;
  }

  @protected
  List<TxPlanIn> sse_decode_list_tx_plan_in(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TxPlanIn>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tx_plan_in(deserializer));
    }
    return ans_;
  }

  @protected
  List<TxPlanOut> sse_decode_list_tx_plan_out(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TxPlanOut>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tx_plan_out(deserializer));
    }
    return ans_;
  }

  @protected
  NewAccount sse_decode_new_account(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_icon = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_restore = sse_decode_bool(deserializer);
    var var_key = sse_decode_String(deserializer);
    var var_aindex = sse_decode_u_32(deserializer);
    var var_birth = sse_decode_opt_box_autoadd_u_32(deserializer);
    return NewAccount(
        icon: var_icon,
        name: var_name,
        restore: var_restore,
        key: var_key,
        aindex: var_aindex,
        birth: var_birth);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PoolBalance sse_decode_pool_balance(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_list_prim_u_64_strict(deserializer);
    return PoolBalance(field0: var_field0);
  }

  @protected
  Receivers sse_decode_receivers(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_taddr = sse_decode_opt_String(deserializer);
    var var_saddr = sse_decode_opt_String(deserializer);
    var var_oaddr = sse_decode_opt_String(deserializer);
    return Receivers(taddr: var_taddr, saddr: var_saddr, oaddr: var_oaddr);
  }

  @protected
  Recipient sse_decode_recipient(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_address = sse_decode_String(deserializer);
    var var_amount = sse_decode_u_64(deserializer);
    var var_pools = sse_decode_opt_box_autoadd_u_8(deserializer);
    var var_userMemo = sse_decode_opt_String(deserializer);
    var var_memoBytes = sse_decode_opt_list_prim_u_8_strict(deserializer);
    return Recipient(
        address: var_address,
        amount: var_amount,
        pools: var_pools,
        userMemo: var_userMemo,
        memoBytes: var_memoBytes);
  }

  @protected
  SyncProgress sse_decode_sync_progress(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_height = sse_decode_u_32(deserializer);
    var var_time = sse_decode_u_32(deserializer);
    return SyncProgress(height: var_height, time: var_time);
  }

  @protected
  TxPlan sse_decode_tx_plan(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_height = sse_decode_u_32(deserializer);
    var var_inputs = sse_decode_list_tx_plan_in(deserializer);
    var var_outputs = sse_decode_list_tx_plan_out(deserializer);
    var var_fee = sse_decode_u_64(deserializer);
    var var_change = sse_decode_u_64(deserializer);
    var var_changePool = sse_decode_u_8(deserializer);
    var var_data = sse_decode_list_prim_u_8_strict(deserializer);
    return TxPlan(
        height: var_height,
        inputs: var_inputs,
        outputs: var_outputs,
        fee: var_fee,
        change: var_change,
        changePool: var_changePool,
        data: var_data);
  }

  @protected
  TxPlanIn sse_decode_tx_plan_in(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_pool = sse_decode_u_8(deserializer);
    var var_amount = sse_decode_u_64(deserializer);
    return TxPlanIn(pool: var_pool, amount: var_amount);
  }

  @protected
  TxPlanOut sse_decode_tx_plan_out(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_pool = sse_decode_u_8(deserializer);
    var var_amount = sse_decode_u_64(deserializer);
    var var_address = sse_decode_String(deserializer);
    return TxPlanOut(pool: var_pool, amount: var_amount, address: var_address);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_StreamSink_sync_progress_Sse(
      RustStreamSink<SyncProgress> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_sync_progress,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_account(Account self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.coin, serializer);
    sse_encode_u_32(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.seed, serializer);
    sse_encode_u_32(self.aindex, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.icon, serializer);
    sse_encode_u_32(self.birth, serializer);
    sse_encode_u_8(self.position, serializer);
    sse_encode_bool(self.hidden, serializer);
    sse_encode_bool(self.saved, serializer);
    sse_encode_bool(self.enabled, serializer);
    sse_encode_u_32(self.height, serializer);
  }

  @protected
  void sse_encode_account_update(AccountUpdate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.coin, serializer);
    sse_encode_u_32(self.id, serializer);
    sse_encode_opt_String(self.name, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.icon, serializer);
    sse_encode_opt_box_autoadd_u_32(self.birth, serializer);
    sse_encode_opt_box_autoadd_bool(self.hidden, serializer);
    sse_encode_opt_box_autoadd_bool(self.enabled, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_account(Account self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_account(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_account_update(
      AccountUpdate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_account_update(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_new_account(
      NewAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_new_account(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self, serializer);
  }

  @protected
  void sse_encode_list_account(List<Account> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_account(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_32_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint32List(self is Uint32List ? self : Uint32List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_32_strict(
      Uint32List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint32List(self);
  }

  @protected
  void sse_encode_list_prim_u_64_strict(
      Uint64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint64List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_recipient(
      List<Recipient> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_recipient(item, serializer);
    }
  }

  @protected
  void sse_encode_list_tx_plan_in(
      List<TxPlanIn> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tx_plan_in(item, serializer);
    }
  }

  @protected
  void sse_encode_list_tx_plan_out(
      List<TxPlanOut> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tx_plan_out(item, serializer);
    }
  }

  @protected
  void sse_encode_new_account(NewAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_list_prim_u_8_strict(self.icon, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_bool(self.restore, serializer);
    sse_encode_String(self.key, serializer);
    sse_encode_u_32(self.aindex, serializer);
    sse_encode_opt_box_autoadd_u_32(self.birth, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_pool_balance(PoolBalance self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_64_strict(self.field0, serializer);
  }

  @protected
  void sse_encode_receivers(Receivers self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.taddr, serializer);
    sse_encode_opt_String(self.saddr, serializer);
    sse_encode_opt_String(self.oaddr, serializer);
  }

  @protected
  void sse_encode_recipient(Recipient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.address, serializer);
    sse_encode_u_64(self.amount, serializer);
    sse_encode_opt_box_autoadd_u_8(self.pools, serializer);
    sse_encode_opt_String(self.userMemo, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.memoBytes, serializer);
  }

  @protected
  void sse_encode_sync_progress(SyncProgress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.height, serializer);
    sse_encode_u_32(self.time, serializer);
  }

  @protected
  void sse_encode_tx_plan(TxPlan self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.height, serializer);
    sse_encode_list_tx_plan_in(self.inputs, serializer);
    sse_encode_list_tx_plan_out(self.outputs, serializer);
    sse_encode_u_64(self.fee, serializer);
    sse_encode_u_64(self.change, serializer);
    sse_encode_u_8(self.changePool, serializer);
    sse_encode_list_prim_u_8_strict(self.data, serializer);
  }

  @protected
  void sse_encode_tx_plan_in(TxPlanIn self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.pool, serializer);
    sse_encode_u_64(self.amount, serializer);
  }

  @protected
  void sse_encode_tx_plan_out(TxPlanOut self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.pool, serializer);
    sse_encode_u_64(self.amount, serializer);
    sse_encode_String(self.address, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
