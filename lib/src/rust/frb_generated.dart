// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/account.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiAccountInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => -355447823;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_zkool',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  String crateApiAccountGetAccountUfvk({required int coin, required int id});

  Future<void> crateApiAccountInitApp();

  Future<List<Account>> crateApiAccountListAccounts({required int coin});

  String crateApiAccountNewSeed({required String phrase});

  int crateApiAccountPutAccountMetadata(
      {required int coin,
      required String name,
      Uint8List? icon,
      required int birth,
      required int height});

  int crateApiAccountPutAccountSaplingSecret(
      {required int coin, required int id, required String esk});

  int crateApiAccountPutAccountSaplingViewing(
      {required int coin, required int id, required String evk});

  int crateApiAccountPutAccountSeed(
      {required int coin,
      required int id,
      required String phrase,
      required int aindex});

  Future<int> crateApiAccountPutAccountTransparentSecret(
      {required int coin, required int id, required String sk});

  int crateApiAccountPutAccountUnifiedViewing(
      {required int coin, required int id, required String uvk});

  Future<Receivers> crateApiAccountReceiversDefault();

  Receivers crateApiAccountReceiversFromUa(
      {required int coin, required String ua});

  void crateApiAccountSetDbFilepath(
      {required int coin, required String dbFilepath});

  String crateApiAccountUaFromUfvk(
      {required int coin, required String ufvk, int? di});

  void crateApiAccountUpdateAccount(
      {required int coin,
      required int id,
      String? name,
      Uint8List? icon,
      int? birth});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  String crateApiAccountGetAccountUfvk({required int coin, required int id}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(coin, serializer);
        sse_encode_u_32(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountGetAccountUfvkConstMeta,
      argValues: [coin, id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountGetAccountUfvkConstMeta =>
      const TaskConstMeta(
        debugName: "get_account_ufvk",
        argNames: ["coin", "id"],
      );

  @override
  Future<void> crateApiAccountInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAccountInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<List<Account>> crateApiAccountListAccounts({required int coin}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(coin, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_account,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountListAccountsConstMeta,
      argValues: [coin],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountListAccountsConstMeta =>
      const TaskConstMeta(
        debugName: "list_accounts",
        argNames: ["coin"],
      );

  @override
  String crateApiAccountNewSeed({required String phrase}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(phrase, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountNewSeedConstMeta,
      argValues: [phrase],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountNewSeedConstMeta => const TaskConstMeta(
        debugName: "new_seed",
        argNames: ["phrase"],
      );

  @override
  int crateApiAccountPutAccountMetadata(
      {required int coin,
      required String name,
      Uint8List? icon,
      required int birth,
      required int height}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(coin, serializer);
        sse_encode_String(name, serializer);
        sse_encode_opt_list_prim_u_8_strict(icon, serializer);
        sse_encode_u_32(birth, serializer);
        sse_encode_u_32(height, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountPutAccountMetadataConstMeta,
      argValues: [coin, name, icon, birth, height],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountPutAccountMetadataConstMeta =>
      const TaskConstMeta(
        debugName: "put_account_metadata",
        argNames: ["coin", "name", "icon", "birth", "height"],
      );

  @override
  int crateApiAccountPutAccountSaplingSecret(
      {required int coin, required int id, required String esk}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(coin, serializer);
        sse_encode_u_32(id, serializer);
        sse_encode_String(esk, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountPutAccountSaplingSecretConstMeta,
      argValues: [coin, id, esk],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountPutAccountSaplingSecretConstMeta =>
      const TaskConstMeta(
        debugName: "put_account_sapling_secret",
        argNames: ["coin", "id", "esk"],
      );

  @override
  int crateApiAccountPutAccountSaplingViewing(
      {required int coin, required int id, required String evk}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(coin, serializer);
        sse_encode_u_32(id, serializer);
        sse_encode_String(evk, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountPutAccountSaplingViewingConstMeta,
      argValues: [coin, id, evk],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountPutAccountSaplingViewingConstMeta =>
      const TaskConstMeta(
        debugName: "put_account_sapling_viewing",
        argNames: ["coin", "id", "evk"],
      );

  @override
  int crateApiAccountPutAccountSeed(
      {required int coin,
      required int id,
      required String phrase,
      required int aindex}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(coin, serializer);
        sse_encode_u_32(id, serializer);
        sse_encode_String(phrase, serializer);
        sse_encode_u_32(aindex, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountPutAccountSeedConstMeta,
      argValues: [coin, id, phrase, aindex],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountPutAccountSeedConstMeta =>
      const TaskConstMeta(
        debugName: "put_account_seed",
        argNames: ["coin", "id", "phrase", "aindex"],
      );

  @override
  Future<int> crateApiAccountPutAccountTransparentSecret(
      {required int coin, required int id, required String sk}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(coin, serializer);
        sse_encode_u_32(id, serializer);
        sse_encode_String(sk, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountPutAccountTransparentSecretConstMeta,
      argValues: [coin, id, sk],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountPutAccountTransparentSecretConstMeta =>
      const TaskConstMeta(
        debugName: "put_account_transparent_secret",
        argNames: ["coin", "id", "sk"],
      );

  @override
  int crateApiAccountPutAccountUnifiedViewing(
      {required int coin, required int id, required String uvk}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(coin, serializer);
        sse_encode_u_32(id, serializer);
        sse_encode_String(uvk, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountPutAccountUnifiedViewingConstMeta,
      argValues: [coin, id, uvk],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountPutAccountUnifiedViewingConstMeta =>
      const TaskConstMeta(
        debugName: "put_account_unified_viewing",
        argNames: ["coin", "id", "uvk"],
      );

  @override
  Future<Receivers> crateApiAccountReceiversDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_receivers,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAccountReceiversDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountReceiversDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "receivers_default",
        argNames: [],
      );

  @override
  Receivers crateApiAccountReceiversFromUa(
      {required int coin, required String ua}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(coin, serializer);
        sse_encode_String(ua, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_receivers,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountReceiversFromUaConstMeta,
      argValues: [coin, ua],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountReceiversFromUaConstMeta =>
      const TaskConstMeta(
        debugName: "receivers_from_ua",
        argNames: ["coin", "ua"],
      );

  @override
  void crateApiAccountSetDbFilepath(
      {required int coin, required String dbFilepath}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(coin, serializer);
        sse_encode_String(dbFilepath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountSetDbFilepathConstMeta,
      argValues: [coin, dbFilepath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountSetDbFilepathConstMeta =>
      const TaskConstMeta(
        debugName: "set_db_filepath",
        argNames: ["coin", "dbFilepath"],
      );

  @override
  String crateApiAccountUaFromUfvk(
      {required int coin, required String ufvk, int? di}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(coin, serializer);
        sse_encode_String(ufvk, serializer);
        sse_encode_opt_box_autoadd_u_32(di, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountUaFromUfvkConstMeta,
      argValues: [coin, ufvk, di],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountUaFromUfvkConstMeta => const TaskConstMeta(
        debugName: "ua_from_ufvk",
        argNames: ["coin", "ufvk", "di"],
      );

  @override
  void crateApiAccountUpdateAccount(
      {required int coin,
      required int id,
      String? name,
      Uint8List? icon,
      int? birth}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(coin, serializer);
        sse_encode_u_32(id, serializer);
        sse_encode_opt_String(name, serializer);
        sse_encode_opt_list_prim_u_8_strict(icon, serializer);
        sse_encode_opt_box_autoadd_u_32(birth, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccountUpdateAccountConstMeta,
      argValues: [coin, id, name, icon, birth],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccountUpdateAccountConstMeta =>
      const TaskConstMeta(
        debugName: "update_account",
        argNames: ["coin", "id", "name", "icon", "birth"],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Account dco_decode_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 12)
      throw Exception('unexpected arr length: expect 12 but see ${arr.length}');
    return Account(
      coin: dco_decode_u_8(arr[0]),
      id: dco_decode_u_32(arr[1]),
      name: dco_decode_String(arr[2]),
      seed: dco_decode_opt_String(arr[3]),
      aindex: dco_decode_u_32(arr[4]),
      icon: dco_decode_opt_list_prim_u_8_strict(arr[5]),
      birth: dco_decode_u_32(arr[6]),
      height: dco_decode_u_32(arr[7]),
      position: dco_decode_u_8(arr[8]),
      hidden: dco_decode_bool(arr[9]),
      saved: dco_decode_bool(arr[10]),
      enabled: dco_decode_bool(arr[11]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<Account> dco_decode_list_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_account).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  Receivers dco_decode_receivers(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Receivers(
      taddr: dco_decode_opt_String(arr[0]),
      saddr: dco_decode_opt_String(arr[1]),
      oaddr: dco_decode_opt_String(arr[2]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Account sse_decode_account(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_coin = sse_decode_u_8(deserializer);
    var var_id = sse_decode_u_32(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_seed = sse_decode_opt_String(deserializer);
    var var_aindex = sse_decode_u_32(deserializer);
    var var_icon = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_birth = sse_decode_u_32(deserializer);
    var var_height = sse_decode_u_32(deserializer);
    var var_position = sse_decode_u_8(deserializer);
    var var_hidden = sse_decode_bool(deserializer);
    var var_saved = sse_decode_bool(deserializer);
    var var_enabled = sse_decode_bool(deserializer);
    return Account(
        coin: var_coin,
        id: var_id,
        name: var_name,
        seed: var_seed,
        aindex: var_aindex,
        icon: var_icon,
        birth: var_birth,
        height: var_height,
        position: var_position,
        hidden: var_hidden,
        saved: var_saved,
        enabled: var_enabled);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  List<Account> sse_decode_list_account(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Account>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_account(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Receivers sse_decode_receivers(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_taddr = sse_decode_opt_String(deserializer);
    var var_saddr = sse_decode_opt_String(deserializer);
    var var_oaddr = sse_decode_opt_String(deserializer);
    return Receivers(taddr: var_taddr, saddr: var_saddr, oaddr: var_oaddr);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_account(Account self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.coin, serializer);
    sse_encode_u_32(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.seed, serializer);
    sse_encode_u_32(self.aindex, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.icon, serializer);
    sse_encode_u_32(self.birth, serializer);
    sse_encode_u_32(self.height, serializer);
    sse_encode_u_8(self.position, serializer);
    sse_encode_bool(self.hidden, serializer);
    sse_encode_bool(self.saved, serializer);
    sse_encode_bool(self.enabled, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_list_account(List<Account> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_account(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_receivers(Receivers self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.taddr, serializer);
    sse_encode_opt_String(self.saddr, serializer);
    sse_encode_opt_String(self.oaddr, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
