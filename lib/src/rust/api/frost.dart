// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'pay.dart';
part 'frost.freezed.dart';

// These functions are ignored because they are not marked as `pub`: `get_funding_account`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `DKGParams`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `fmt`, `fmt`

Future<void> setDkgParams(
        {required String name,
        required int id,
        required int n,
        required int t,
        required int fundingAccount}) =>
    RustLib.instance.api.crateApiFrostSetDkgParams(
        name: name, id: id, n: n, t: t, fundingAccount: fundingAccount);

Future<bool> hasDkgParams() => RustLib.instance.api.crateApiFrostHasDkgParams();

Future<void> initDkg() => RustLib.instance.api.crateApiFrostInitDkg();

Future<bool> hasDkgAddresses() =>
    RustLib.instance.api.crateApiFrostHasDkgAddresses();

Stream<DKGStatus> doDkg() => RustLib.instance.api.crateApiFrostDoDkg();

Future<List<String>> getDkgAddresses() =>
    RustLib.instance.api.crateApiFrostGetDkgAddresses();

Future<void> setDkgAddress({required int id, required String address}) =>
    RustLib.instance.api.crateApiFrostSetDkgAddress(id: id, address: address);

Future<void> cancelDkg() => RustLib.instance.api.crateApiFrostCancelDkg();

Future<void> resetSign() => RustLib.instance.api.crateApiFrostResetSign();

Future<void> initSign(
        {required int coordinator,
        required int fundingAccount,
        required PcztPackage pczt}) =>
    RustLib.instance.api.crateApiFrostInitSign(
        coordinator: coordinator, fundingAccount: fundingAccount, pczt: pczt);

Future<bool> isSigningInProgress() =>
    RustLib.instance.api.crateApiFrostIsSigningInProgress();

Stream<SigningStatus> doSign() => RustLib.instance.api.crateApiFrostDoSign();

@freezed
sealed class DKGStatus with _$DKGStatus {
  const DKGStatus._();

  const factory DKGStatus.waitParams() = DKGStatus_WaitParams;
  const factory DKGStatus.waitAddresses(
    List<String> field0,
  ) = DKGStatus_WaitAddresses;
  const factory DKGStatus.publishRound1Pkg() = DKGStatus_PublishRound1Pkg;
  const factory DKGStatus.waitRound1Pkg() = DKGStatus_WaitRound1Pkg;
  const factory DKGStatus.publishRound2Pkg() = DKGStatus_PublishRound2Pkg;
  const factory DKGStatus.waitRound2Pkg() = DKGStatus_WaitRound2Pkg;
  const factory DKGStatus.finalize() = DKGStatus_Finalize;
  const factory DKGStatus.sharedAddress(
    String field0,
  ) = DKGStatus_SharedAddress;
}

@freezed
class FrostSignParams with _$FrostSignParams {
  const FrostSignParams._();
  const factory FrostSignParams({
    required int coordinator,
    required int fundingAccount,
  }) = _FrostSignParams;
  static Future<FrostSignParams> default_() =>
      RustLib.instance.api.crateApiFrostFrostSignParamsDefault();
}

@freezed
sealed class SigningStatus with _$SigningStatus {
  const SigningStatus._();

  const factory SigningStatus.sendingCommitment() =
      SigningStatus_SendingCommitment;
  const factory SigningStatus.waitingForCommitments() =
      SigningStatus_WaitingForCommitments;
  const factory SigningStatus.sendingSigningPackage() =
      SigningStatus_SendingSigningPackage;
  const factory SigningStatus.waitingForSigningPackage() =
      SigningStatus_WaitingForSigningPackage;
  const factory SigningStatus.sendingSignatureShare() =
      SigningStatus_SendingSignatureShare;
  const factory SigningStatus.signingCompleted() =
      SigningStatus_SigningCompleted;
  const factory SigningStatus.waitingForSignatureShares() =
      SigningStatus_WaitingForSignatureShares;
  const factory SigningStatus.preparingTransaction() =
      SigningStatus_PreparingTransaction;
  const factory SigningStatus.sendingTransaction() =
      SigningStatus_SendingTransaction;
  const factory SigningStatus.transactionSent(
    String field0,
  ) = SigningStatus_TransactionSent;
}
