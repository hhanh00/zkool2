// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'frost.freezed.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `DKGPackage`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`

Future<FrostPackage> newFrost(
        {required String name,
        required int id,
        required int n,
        required int t,
        required int fundingAccount}) =>
    RustLib.instance.api.crateApiFrostNewFrost(
        name: name, id: id, n: n, t: t, fundingAccount: fundingAccount);

Future<FrostPackage?> loadFrost() =>
    RustLib.instance.api.crateApiFrostLoadFrost();

Future<void> submitDkg({required FrostPackage package}) =>
    RustLib.instance.api.crateApiFrostSubmitDkg(package: package);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DKGState>>
abstract class DkgState implements RustOpaqueInterface {
  int get broadcastAccount;

  FrostPackage get package;

  set broadcastAccount(int broadcastAccount);

  set package(FrostPackage package);

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<DkgState> newInstance({required FrostPackage package}) =>
      RustLib.instance.api.crateApiFrostDkgStateNew(package: package);

  Future<void> run();
}

@freezed
class FrostPackage with _$FrostPackage {
  const FrostPackage._();
  const factory FrostPackage({
    required String name,
    required int id,
    required int n,
    required int t,
    required int fundingAccount,
    required int mailboxAccount,
    required List<String> addresses,
  }) = _FrostPackage;
  static Future<FrostPackage> default_() =>
      RustLib.instance.api.crateApiFrostFrostPackageDefault();

  Future<DkgState?> toState() =>
      RustLib.instance.api.crateApiFrostFrostPackageToState(
        that: this,
      );

  Future<bool> userInputCompleted() =>
      RustLib.instance.api.crateApiFrostFrostPackageUserInputCompleted(
        that: this,
      );
}
