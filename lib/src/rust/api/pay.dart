// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../lib.dart';
import '../pay.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'pay.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `borrow_decode`, `decode`, `encode`

Future<String> buildPuri({required List<Recipient> recipients}) =>
    RustLib.instance.api.crateApiPayBuildPuri(recipients: recipients);

Future<PcztPackage> prepare(
        {required List<Recipient> recipients,
        required PaymentOptions options,}) =>
    RustLib.instance.api
        .crateApiPayPrepare(recipients: recipients, options: options);

Future<PcztPackage> signTransaction({required PcztPackage pczt}) =>
    RustLib.instance.api.crateApiPaySignTransaction(pczt: pczt);

Future<Uint8List> extractTransaction({required PcztPackage package}) =>
    RustLib.instance.api.crateApiPayExtractTransaction(package: package);

Future<Uint8List> packTransaction({required PcztPackage pczt}) =>
    RustLib.instance.api.crateApiPayPackTransaction(pczt: pczt);

Future<PcztPackage> unpackTransaction({required List<int> bytes}) =>
    RustLib.instance.api.crateApiPayUnpackTransaction(bytes: bytes);

Future<String> broadcastTransaction(
        {required int height, required List<int> txBytes,}) =>
    RustLib.instance.api
        .crateApiPayBroadcastTransaction(height: height, txBytes: txBytes);

TxPlan toPlan({required PcztPackage package}) =>
    RustLib.instance.api.crateApiPayToPlan(package: package);

Future<String> send({required int height, required List<int> data}) =>
    RustLib.instance.api.crateApiPaySend(height: height, data: data);

List<Recipient>? parsePaymentUri({required String uri}) =>
    RustLib.instance.api.crateApiPayParsePaymentUri(uri: uri);

enum DustChangePolicy {
  discard,
  sendToRecipient,
  ;
}

class PaymentOptions {
  final int srcPools;
  final bool recipientPaysFee;
  final bool smartTransparent;
  final DustChangePolicy dustChangePolicy;

  const PaymentOptions({
    required this.srcPools,
    required this.recipientPaysFee,
    required this.smartTransparent,
    required this.dustChangePolicy,
  });

  @override
  int get hashCode =>
      srcPools.hashCode ^
      recipientPaysFee.hashCode ^
      smartTransparent.hashCode ^
      dustChangePolicy.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PaymentOptions &&
          runtimeType == other.runtimeType &&
          srcPools == other.srcPools &&
          recipientPaysFee == other.recipientPaysFee &&
          smartTransparent == other.smartTransparent &&
          dustChangePolicy == other.dustChangePolicy;
}

@freezed
sealed class PcztPackage with _$PcztPackage {
  const factory PcztPackage({
    required Uint8List pczt,
    required UsizeArray3 nSpends,
    required Uint64List saplingIndices,
    required Uint64List orchardIndices,
    required bool canSign,
    required bool canBroadcast,
  }) = _PcztPackage;
}
