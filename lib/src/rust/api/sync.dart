// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `transparent_sync`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `CANCEL_SYNC`, `SYNCING`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `deref`, `deref`, `fmt`, `initialize`, `initialize`

Stream<SyncProgress> synchronize(
        {required List<int> accounts,
        required int currentHeight,
        required int actionsPerSync,
        required int transparentLimit,
        required int checkpointAge}) =>
    RustLib.instance.api.crateApiSyncSynchronize(
        accounts: accounts,
        currentHeight: currentHeight,
        actionsPerSync: actionsPerSync,
        transparentLimit: transparentLimit,
        checkpointAge: checkpointAge);

Future<PoolBalance> balance() => RustLib.instance.api.crateApiSyncBalance();

Future<void> cancelSync() => RustLib.instance.api.crateApiSyncCancelSync();

Future<void> rewindSync({required int height}) =>
    RustLib.instance.api.crateApiSyncRewindSync(height: height);

Future<int> getDbHeight() => RustLib.instance.api.crateApiSyncGetDbHeight();

Future<void> getTxDetails() => RustLib.instance.api.crateApiSyncGetTxDetails();

class PoolBalance {
  final Uint64List field0;

  const PoolBalance({
    required this.field0,
  });

  @override
  int get hashCode => field0.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PoolBalance &&
          runtimeType == other.runtimeType &&
          field0 == other.field0;
}

class SyncProgress {
  final int height;
  final int time;

  const SyncProgress({
    required this.height,
    required this.time,
  });

  @override
  int get hashCode => height.hashCode ^ time.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SyncProgress &&
          runtimeType == other.runtimeType &&
          height == other.height &&
          time == other.time;
}
